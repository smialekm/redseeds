Schema eu.redseeds.scl.SCLWordNetSchema;
GraphClass SCLGraph {uid: String};
EnumDomain java5.constants.BuiltInTypes (BOOLEAN, CHAR, BYTE, SHORT, INT, LONG, FLOAT, DOUBLE);
EnumDomain java5.constants.InfixOperators (ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, DIV_ASSIGN, MUL_ASSIGN, MOD_ASSIGN, B_AND_ASSIGN, B_OR_ASSIGN, B_XOR_ASSIGN, B_NOT_ASSIGN, SHL_ASSIGN, SHR_ASSIGN, UNSIGNED_SHR_ASSIGN, PLUS, MINUS, MUL, DIV, MOD, B_AND, B_OR, B_XOR, L_AND, L_OR, EQ, NEQ, GT, GEQ, LT, LEQ, SHL, SHR, UNSIGNED_SHR, INSTANCEOF);
EnumDomain java5.constants.MethodInvocationTypes (METHOD, SUPERMETHOD, CONSTRUCTOR, SUPERCONSTRUCTOR, EXPLICITCONSTRUCTOR);
EnumDomain java5.constants.PostfixOperators (INCR, DECR);
EnumDomain java5.constants.PrefixOperators (MINUS, PLUS, INCR, DECR, L_NOT, B_NOT);
EnumDomain rsl.rslrequirementrepresentationsentences.controlsentences.InclusionType (INSERT, REQUEST);
EnumDomain uml.classes.kernel.AggregationKind (NONE, SHARED, COMPOSITE);
EnumDomain uml.classes.kernel.ParameterDirectionKind (IN, INOUT, OUT, RETURN);
EnumDomain uml.classes.kernel.VisibilityKind (PUBLIC, PRIVATE, PROTECTED, PACKAGE);
EnumDomain uml.components.basiccomponents.ConnectorKind (ASSEMBLY, DELEGATION);
EnumDomain uml.interactions.basicinteractions.MessageSort (ASYNCHCALL, SYNCHCALL, ASYNCHSIGNAL, CREATEMESSAGE, DELETEMESSAGE, REPLY);
Package java5;
Package java5.annotations;
Package java5.basiclanguageelements;
Package java5.comments;
Package java5.constants;
Package java5.expressions;
Package java5.members;
Package java5.programs;
Package java5.statements;
Package java5.types;
Package java5.typespecifications;
Package mapping;
Package mola;
Package rsl;
Package rsl.rslkernel;
Package rsl.rslkernel.attributes;
Package rsl.rslkernel.elements;
Package rsl.rslrequirements;
Package rsl.rslrequirements.requirementsspecifications;
Package rsl.rslrequirements.requirementrelationships;
Package rsl.rslrequirements.usecaserelationships;
Package rsl.rslrequirementrepresentations;
Package rsl.rslrequirementrepresentations.requirementrepresentations;
Package rsl.rslrequirementrepresentations.descriptiverequirementrepresentations;
Package rsl.rslrequirementrepresentations.activityrepresentations;
Package rsl.rslrequirementrepresentations.interactionrepresentations;
Package rsl.rslrequirementrepresentations.uibehaviourrepresentations;
Package rsl.rslrequirementrepresentationsentences;
Package rsl.rslrequirementrepresentationsentences.constrainedlanguagesentences;
Package rsl.rslrequirementrepresentationsentences.representationsentences;
Package rsl.rslrequirementrepresentationsentences.svosentences;
Package rsl.rslrequirementrepresentationsentences.controlsentences;
Package rsl.rslrequirementrepresentationsentences.activityrepresentation;
Package rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs;
Package rsl.rsldomainelements;
Package rsl.rsldomainelements.domainelements;
Package rsl.rsldomainelements.notions;
Package rsl.rsldomainelements.systemelements;
Package rsl.rsldomainelements.actors;
Package rsl.rsldomainelements.uielements;
Package rsl.rsldomainelements.domainelementrepresentations;
Package rsl.rsldomainelements.phrases;
Package rsl.rsldomainelements.terms;
Package sclkernel;
Package ea;
Package uml;
Package uml.action;
Package uml.action.basicactions;
Package uml.activities;
Package uml.activities.basicactivities;
Package uml.activities.fundamentalactivities;
Package uml.activities.intermediateactivities;
Package uml.auxiliaryconstructs;
Package uml.auxiliaryconstructs.models;
Package uml.classes;
Package uml.classes.dependencies;
Package uml.classes.interfaces;
Package uml.classes.kernel;
Package uml.commonbehaviors;
Package uml.commonbehaviors.basicbehaviors;
Package uml.commonbehaviors.communications;
Package uml.components;
Package uml.components.basiccomponents;
Package uml.compositestructures;
Package uml.compositestructures.collaborations;
Package uml.compositestructures.internalstructures;
Package uml.compositestructures.ports;
Package uml.compositestructures.structuredclasses;
Package uml.interactions;
Package uml.interactions.basicinteractions;
Package uml.interactions.fragments;
Package uml.usecases;
Package;
VertexClass java5.annotations.Annotation: sclkernel.SCLElement {name: String};
VertexClass java5.basiclanguageelements.Block: sclkernel.SCLElement;
VertexClass java5.basiclanguageelements.Identifier: sclkernel.SCLElement {name: String};
VertexClass java5.basiclanguageelements.JavaModifier: sclkernel.SCLElement {type: Integer};
VertexClass java5.basiclanguageelements.ParameterDeclaration: sclkernel.SCLElement;
VertexClass java5.basiclanguageelements.QualifiedName: java5.basiclanguageelements.QualifiedType;
VertexClass java5.basiclanguageelements.QualifiedType: java5.typespecifications.TypeSpecification;
VertexClass java5.basiclanguageelements.VariableLengthDeclaration: java5.basiclanguageelements.ParameterDeclaration;
abstract VertexClass java5.comments.Comment: sclkernel.SCLElement;
VertexClass java5.comments.JavaDocComment: java5.comments.Comment;
VertexClass java5.comments.MultiLineComment: java5.comments.Comment;
VertexClass java5.comments.SingleLineComment: java5.comments.Comment;
VertexClass java5.expressions.ArrayCreation: java5.expressions.Expression;
VertexClass java5.expressions.ArrayInitializer: java5.expressions.Expression;
VertexClass java5.expressions.BooleanConstant: java5.expressions.Constant {value: Boolean};
VertexClass java5.expressions.BuiltInCast: java5.expressions.Expression;
VertexClass java5.expressions.CharConstant: java5.expressions.Constant {value: String};
VertexClass java5.expressions.ClassCast: java5.expressions.Expression;
VertexClass java5.expressions.ClassInstanceCreation: java5.expressions.Expression;
VertexClass java5.expressions.ConditionalExpression: java5.expressions.Expression;
abstract VertexClass java5.expressions.Constant: java5.expressions.Expression {literal: String};
VertexClass java5.expressions.DoubleConstant: java5.expressions.Constant {value: Double};
abstract VertexClass java5.expressions.Expression: java5.statements.Statement;
VertexClass java5.expressions.FieldAccess: java5.expressions.Expression;
VertexClass java5.expressions.FloatConstant: java5.expressions.Constant {value: Double};
VertexClass java5.expressions.InfixExpression: java5.expressions.Expression {operator: java5.constants.InfixOperators};
VertexClass java5.expressions.IntegerConstant: java5.expressions.Constant {value: Integer};
VertexClass java5.expressions.LongConstant: java5.expressions.Constant {value: Long};
VertexClass java5.expressions.MethodInvocation: java5.expressions.Expression {methodInvocationType: java5.constants.MethodInvocationTypes};
VertexClass java5.expressions.NullExpression: java5.expressions.Expression;
VertexClass java5.expressions.PostfixExpression: java5.expressions.Expression {operator: java5.constants.PostfixOperators};
VertexClass java5.expressions.PrefixExpression: java5.expressions.Expression {operator: java5.constants.PrefixOperators};
VertexClass java5.expressions.StringConstant: java5.expressions.Constant;
VertexClass java5.expressions.VariableInitializer: java5.expressions.Expression;
VertexClass java5.members.ConstructorDefinition: java5.members.Member;
VertexClass java5.members.EnumConstant: java5.members.Member;
VertexClass java5.members.Field: java5.members.Member;
abstract VertexClass java5.members.Member: sclkernel.SCLElement;
VertexClass java5.members.MethodDeclaration: java5.members.Member;
VertexClass java5.members.MethodDefinition: java5.members.MethodDeclaration;
VertexClass java5.members.StaticConstructor: java5.members.Member;
VertexClass java5.members.StaticInitializer: java5.members.Member;
abstract VertexClass java5.programs.ExternalDeclaration: sclkernel.SCLElement;
VertexClass java5.programs.Import: java5.programs.ExternalDeclaration;
VertexClass java5.programs.JavaPackage: java5.programs.ExternalDeclaration {name: String};
VertexClass java5.programs.Program: sclkernel.SCLElement {name: String};
VertexClass java5.programs.SourceFile: sclkernel.SCLElement {name: String};
VertexClass java5.programs.SourceUsage: sclkernel.SCLElement;
VertexClass java5.programs.TranslationUnit: sclkernel.SCLElement;
VertexClass java5.statements.Assert: java5.statements.Statement;
VertexClass java5.statements.Break: java5.statements.Statement;
VertexClass java5.statements.Case: sclkernel.SCLElement;
VertexClass java5.statements.Catch: java5.statements.Statement;
VertexClass java5.statements.Compound: java5.statements.Statement;
VertexClass java5.statements.Continue: java5.statements.Statement;
VertexClass java5.statements.Declaration: java5.statements.Statement;
VertexClass java5.statements.Default: sclkernel.SCLElement;
VertexClass java5.statements.DoWhile: java5.statements.Statement;
VertexClass java5.statements.EmptyStatement: java5.statements.Statement;
VertexClass java5.statements.ForEachClause: java5.statements.ForHead;
abstract VertexClass java5.statements.ForHead: sclkernel.SCLElement;
VertexClass java5.statements.ForStatement: java5.statements.Statement;
VertexClass java5.statements.If: java5.statements.Statement;
VertexClass java5.statements.Label: java5.statements.Statement;
VertexClass java5.statements.Return: java5.statements.Statement;
abstract VertexClass java5.statements.Statement: sclkernel.SCLElement;
VertexClass java5.statements.Switch: java5.statements.Statement;
VertexClass java5.statements.Synchronized: java5.statements.Statement;
VertexClass java5.statements.Throw: java5.statements.Statement;
VertexClass java5.statements.TraditionalForClause: java5.statements.ForHead;
VertexClass java5.statements.Try: java5.statements.Statement;
VertexClass java5.statements.While: java5.statements.Statement;
VertexClass java5.types.AnnotationDefinition: java5.types.Type;
VertexClass java5.types.ClassDefinition: java5.types.Type;
VertexClass java5.types.EnumDefinition: java5.types.Type;
VertexClass java5.types.InterfaceDefinition: java5.types.Type;
abstract VertexClass java5.types.Type: java5.members.Member, java5.programs.ExternalDeclaration {name: String};
VertexClass java5.typespecifications.ArrayType: java5.typespecifications.TypeSpecification {dimensions: Integer};
VertexClass java5.typespecifications.BuiltInType: java5.typespecifications.TypeSpecification {type: java5.constants.BuiltInTypes};
VertexClass java5.typespecifications.SimpleArgument: sclkernel.SCLElement;
VertexClass java5.typespecifications.TypeArgument: java5.typespecifications.TypeSpecification;
VertexClass java5.typespecifications.TypeParameterDeclaration: java5.typespecifications.TypeSpecification;
VertexClass java5.typespecifications.TypeParameterUsage: java5.typespecifications.TypeSpecification;
abstract VertexClass java5.typespecifications.TypeSpecification: sclkernel.SCLElement;
VertexClass java5.typespecifications.WildcardArgument: sclkernel.SCLElement;
VertexClass mapping.Mapping;
VertexClass mapping.MappingInformation;
VertexClass mapping.MappingTable;
VertexClass mapping.SimilarityValue {similarity: Double};
VertexClass rsl.rslkernel.attributes.Attribute: sclkernel.SCLElement {data: String};
VertexClass rsl.rslkernel.attributes.AttributeDefinition: sclkernel.SCLElement {name: String, type: String};
VertexClass rsl.rslkernel.attributes.AttributeSet: sclkernel.SCLElement;
abstract VertexClass rsl.rslkernel.elements.ElementRepresentation: sclkernel.SCLElement;
abstract VertexClass rsl.rslkernel.elements.Hyperlink: sclkernel.SCLRelationship;
abstract VertexClass rsl.rslkernel.elements.HyperlinkedSentence: rsl.rslkernel.elements.SentenceOrPhrase {sentenceText: String};
abstract VertexClass rsl.rslkernel.elements.RepresentableElement: sclkernel.SCLElement;
abstract VertexClass rsl.rslkernel.elements.RepresentableElementRelationship: sclkernel.SCLRelationship;
abstract VertexClass rsl.rslkernel.elements.RepresentableElementsPackage: sclkernel.SCLElementsPackage;
abstract VertexClass rsl.rslkernel.elements.SentenceOrPhrase: sclkernel.SCLElement;
abstract VertexClass rsl.rslkernel.elements.TermOrPhrase: sclkernel.SCLElement;
VertexClass rsl.rslrequirements.requirementsspecifications.ConstraintOnProcess: rsl.rslrequirements.requirementsspecifications.Requirement;
VertexClass rsl.rslrequirements.requirementsspecifications.ConstraintOnSystem: rsl.rslrequirements.requirementsspecifications.Requirement;
VertexClass rsl.rslrequirements.requirementsspecifications.FunctionalRequirementOnComposite: rsl.rslrequirements.requirementsspecifications.Requirement;
VertexClass rsl.rslrequirements.requirementsspecifications.FunctionalRequirementOnSystem: rsl.rslrequirements.requirementsspecifications.Requirement;
VertexClass rsl.rslrequirements.requirementsspecifications.Requirement: rsl.rslkernel.elements.RepresentableElement {requirementId: String};
VertexClass rsl.rslrequirements.requirementsspecifications.RequirementsPackage: rsl.rslkernel.elements.RepresentableElementsPackage;
// Written in RSL
VertexClass rsl.rslrequirements.requirementsspecifications.RequirementsSpecification: sclkernel.SoftwareArtifact;
VertexClass rsl.rslrequirements.requirementsspecifications.RSLUseCase: rsl.rslrequirements.requirementsspecifications.Requirement;
VertexClass rsl.rslrequirements.requirementrelationships.ConflictsWith: rsl.rslrequirements.requirementrelationships.NonInvocationRelationship, sclkernel.TraceabilityLink;
VertexClass rsl.rslrequirements.requirementrelationships.Constrains: rsl.rslrequirements.requirementrelationships.NonInvocationRelationship, sclkernel.TraceabilityLink;
VertexClass rsl.rslrequirements.requirementrelationships.DependsOn: rsl.rslrequirements.requirementrelationships.NonInvocationRelationship, sclkernel.TraceabilityLink;
VertexClass rsl.rslrequirements.requirementrelationships.DerivesFrom: rsl.rslrequirements.requirementrelationships.NonInvocationRelationship, sclkernel.TraceabilityLink;
VertexClass rsl.rslrequirements.requirementrelationships.Elaborates: rsl.rslrequirements.requirementrelationships.NonInvocationRelationship, sclkernel.TraceabilityLink;
VertexClass rsl.rslrequirements.requirementrelationships.Fulfils: rsl.rslrequirements.requirementrelationships.NonInvocationRelationship, sclkernel.TraceabilityLink;
VertexClass rsl.rslrequirements.requirementrelationships.IsSimilarTo: rsl.rslrequirements.requirementrelationships.NonInvocationRelationship, sclkernel.TraceabilityLink;
VertexClass rsl.rslrequirements.requirementrelationships.MakesPossible: rsl.rslrequirements.requirementrelationships.NonInvocationRelationship, sclkernel.TraceabilityLink;
// Mapping from conceptual association between requirements
abstract VertexClass rsl.rslrequirements.requirementrelationships.NonInvocationRelationship: rsl.rslrequirements.requirementrelationships.RequirementRelationship;
VertexClass rsl.rslrequirements.requirementrelationships.Operationalizes: rsl.rslrequirements.requirementrelationships.NonInvocationRelationship, sclkernel.TraceabilityLink;
abstract VertexClass rsl.rslrequirements.requirementrelationships.RequirementRelationship: rsl.rslkernel.elements.RepresentableElementRelationship;
VertexClass rsl.rslrequirements.requirementrelationships.RequirementVocabularyRelationship: rsl.rslkernel.elements.RepresentableElementRelationship;
// Mapping from conceptual association "invoke"
VertexClass rsl.rslrequirements.usecaserelationships.InvocationRelationship: rsl.rslrequirements.requirementrelationships.RequirementRelationship;
VertexClass rsl.rslrequirements.usecaserelationships.Participation: rsl.rslkernel.elements.RepresentableElementRelationship;
VertexClass rsl.rslrequirements.usecaserelationships.Usage: rsl.rslkernel.elements.RepresentableElementRelationship;
abstract VertexClass rsl.rslrequirementrepresentations.requirementrepresentations.DescriptiveRequirementRepresentation: rsl.rslrequirementrepresentations.requirementrepresentations.RequirementRepresentation;
abstract VertexClass rsl.rslrequirementrepresentations.requirementrepresentations.ModelBasedRequirementRepresentation: rsl.rslrequirementrepresentations.requirementrepresentations.RequirementRepresentation;
abstract VertexClass rsl.rslrequirementrepresentations.requirementrepresentations.RequirementRepresentation: rsl.rslkernel.elements.ElementRepresentation {name: String};
VertexClass rsl.rslrequirementrepresentations.descriptiverequirementrepresentations.ConstrainedLanguageScenario: rsl.rslrequirementrepresentations.requirementrepresentations.DescriptiveRequirementRepresentation;
VertexClass rsl.rslrequirementrepresentations.descriptiverequirementrepresentations.SentenceList: rsl.rslrequirementrepresentations.requirementrepresentations.DescriptiveRequirementRepresentation;
// {ScenarioSentences contained in these scenarios are the same (they have the same subjects and predicates in the same order).} 
VertexClass rsl.rslrequirementrepresentations.activityrepresentations.ActivityScenario: rsl.rslrequirementrepresentations.requirementrepresentations.ModelBasedRequirementRepresentation;
// {ScenarioSentences contained in these scenarios are the same (they have the same subjects and predicates in the same order).} 
VertexClass rsl.rslrequirementrepresentations.interactionrepresentations.InteractionScenario: rsl.rslrequirementrepresentations.requirementrepresentations.ModelBasedRequirementRepresentation;
VertexClass rsl.rslrequirementrepresentations.uibehaviourrepresentations.UIScene: sclkernel.SCLElement {sceneDescription: String, sceneNumber: Integer};
VertexClass rsl.rslrequirementrepresentations.uibehaviourrepresentations.UIStoryboard: sclkernel.SCLElement;
VertexClass rsl.rslrequirementrepresentations.uibehaviourrepresentations.UserAction: sclkernel.SCLRelationship;
VertexClass rsl.rslrequirementrepresentationsentences.constrainedlanguagesentences.RejoinSentence: rsl.rslrequirementrepresentationsentences.constrainedlanguagesentences.ConstrainedLanguageSentence;
abstract VertexClass rsl.rslrequirementrepresentationsentences.constrainedlanguagesentences.ConstrainedLanguageSentence: rsl.rslkernel.elements.HyperlinkedSentence;
VertexClass rsl.rslrequirementrepresentationsentences.representationsentences.NaturalLanguageHypertextSentence: rsl.rslkernel.elements.HyperlinkedSentence;
VertexClass rsl.rslrequirementrepresentationsentences.svosentences.ConditionalConjunctionLink: rsl.rsldomainelements.terms.TermHyperlink;
VertexClass rsl.rslrequirementrepresentationsentences.svosentences.ConditionalSentence: rsl.rslrequirementrepresentationsentences.constrainedlanguagesentences.ConstrainedLanguageSentence;
VertexClass rsl.rslrequirementrepresentationsentences.svosentences.ModalSVOSentence: rsl.rslrequirementrepresentationsentences.svosentences.SVOSentence;
VertexClass rsl.rslrequirementrepresentationsentences.svosentences.ModalVerbLink: rsl.rsldomainelements.terms.TermHyperlink;
VertexClass rsl.rslrequirementrepresentationsentences.svosentences.Predicate: rsl.rsldomainelements.phrases.PhraseHyperlink;
VertexClass rsl.rslrequirementrepresentationsentences.svosentences.SVOSentence: rsl.rslrequirementrepresentationsentences.constrainedlanguagesentences.ConstrainedLanguageSentence;
VertexClass rsl.rslrequirementrepresentationsentences.svosentences.Subject: rsl.rsldomainelements.phrases.PhraseHyperlink;
VertexClass rsl.rslrequirementrepresentationsentences.controlsentences.ConditionSentence: rsl.rslrequirementrepresentationsentences.constrainedlanguagesentences.ConstrainedLanguageSentence;
abstract VertexClass rsl.rslrequirementrepresentationsentences.controlsentences.ControlSentence: rsl.rslrequirementrepresentationsentences.constrainedlanguagesentences.ConstrainedLanguageSentence;
// {for invokedSentence sentence content should correspond to name of UseCase pointed by InvocationRelationship} 
VertexClass rsl.rslrequirementrepresentationsentences.controlsentences.InvocationSentence: rsl.rslrequirementrepresentationsentences.controlsentences.ControlSentence {inclusionType: rsl.rslrequirementrepresentationsentences.controlsentences.InclusionType};
VertexClass rsl.rslrequirementrepresentationsentences.controlsentences.PostconditionSentence: rsl.rslrequirementrepresentationsentences.controlsentences.ControlSentence {isSuccess: Boolean};
VertexClass rsl.rslrequirementrepresentationsentences.controlsentences.PreconditionSentence: rsl.rslrequirementrepresentationsentences.controlsentences.ControlSentence {inclusionType: rsl.rslrequirementrepresentationsentences.controlsentences.InclusionType};
VertexClass rsl.rslrequirementrepresentationsentences.activityrepresentation.RSLActivityEdge: sclkernel.SCLElement;
VertexClass rsl.rslrequirementrepresentationsentences.activityrepresentation.RSLActivityNode: sclkernel.SCLElement;
VertexClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.ActorLifeline: rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.NounPhraseLifeline;
VertexClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.ActorMessageEnd: rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.ScenarioMessageEnd;
// dbildhauer, 21/01/2008: Removed generalisation between InteractionRepresentationLifeline and UML::Lifeline and ScenarioMessage and UML::ScenarioMessage
abstract VertexClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.InteractionRepresentationLifeline: rsl.rslkernel.elements.ElementRepresentation;
VertexClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.InvokeLifeline: rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.InteractionRepresentationLifeline;
VertexClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.InvokeMessage: rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.ScenarioMessage;
VertexClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.InvokeMessageEnd: rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.ScenarioMessageEnd;
abstract VertexClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.NounPhraseLifeline: rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.InteractionRepresentationLifeline, rsl.rsldomainelements.domainelementrepresentations.DomainElementRepresentation;
VertexClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.PostconditionMessage: rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.ScenarioMessage;
VertexClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.PreconditionMessage: rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.ScenarioMessage;
VertexClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.PredicateMessage: rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.ScenarioMessage;
VertexClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.RejoinMessage: rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.ScenarioMessage;
// dbildhauer, 21/01/2008: Removed generalisation between InteractionRepresentationLifeline and UML::Lifeline and ScenarioMessage and UML::ScenarioMessage
abstract VertexClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.ScenarioMessage: sclkernel.SCLElement;
VertexClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.ScenarioMessageEnd;
VertexClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.SystemElementLifeline: rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.NounPhraseLifeline;
VertexClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.SystemElementMessageEnd: rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.ScenarioMessageEnd;
abstract VertexClass rsl.rsldomainelements.domainelements.ActorOrSystemElement: rsl.rsldomainelements.domainelements.DomainElement;
abstract VertexClass rsl.rsldomainelements.domainelements.DomainElement: rsl.rslkernel.elements.RepresentableElement;
VertexClass rsl.rsldomainelements.domainelements.DomainElementRelationship: rsl.rslkernel.elements.RepresentableElementRelationship {directed: Boolean, sourceMultiplicity: String, targetMultiplicity: String};
abstract VertexClass rsl.rsldomainelements.domainelements.DomainElementsPackage: rsl.rslkernel.elements.RepresentableElementsPackage;
VertexClass rsl.rsldomainelements.domainelements.DomainSpecification: rsl.rslkernel.elements.RepresentableElementsPackage;
VertexClass rsl.rsldomainelements.notions.DomainStatement: rsl.rslkernel.elements.RepresentableElement;
// {Notion groups all DomainStatements whose "names" contain Phrases linked with the same Noun as in the Notion's "name"} 
VertexClass rsl.rsldomainelements.notions.Notion: rsl.rsldomainelements.domainelements.DomainElement;
VertexClass rsl.rsldomainelements.notions.NotionAttribute: rsl.rslkernel.attributes.Attribute;
VertexClass rsl.rsldomainelements.notions.NotionSpecialisation: rsl.rslkernel.elements.RepresentableElementRelationship;
VertexClass rsl.rsldomainelements.notions.NotionsPackage: rsl.rsldomainelements.domainelements.DomainElementsPackage;
VertexClass rsl.rsldomainelements.systemelements.SystemElement: rsl.rsldomainelements.domainelements.ActorOrSystemElement;
VertexClass rsl.rsldomainelements.systemelements.SystemElementsPackage: rsl.rsldomainelements.domainelements.DomainElementsPackage;
VertexClass rsl.rsldomainelements.actors.Actor: rsl.rsldomainelements.domainelements.ActorOrSystemElement;
VertexClass rsl.rsldomainelements.actors.ActorsPackage: rsl.rsldomainelements.domainelements.DomainElementsPackage;
VertexClass rsl.rsldomainelements.uielements.InputOutputDevice: rsl.rsldomainelements.notions.Notion {deviceId: String};
VertexClass rsl.rsldomainelements.uielements.InputOutputType: rsl.rsldomainelements.notions.Notion {description: String};
VertexClass rsl.rsldomainelements.uielements.InputUIElement: rsl.rsldomainelements.uielements.UIElement {dataValidation: String};
VertexClass rsl.rsldomainelements.uielements.OptionUIElement: rsl.rsldomainelements.uielements.UIElement {isReSelectable: Boolean};
VertexClass rsl.rsldomainelements.uielements.PresentationOrder: sclkernel.SCLElement;
VertexClass rsl.rsldomainelements.uielements.SelectionUIElement: rsl.rsldomainelements.uielements.UIElement {maximumSelectableOptions: Integer, sortCriterion: String, sortOrder: String};
VertexClass rsl.rsldomainelements.uielements.TriggerUIElement: rsl.rsldomainelements.uielements.UIElement {executionTime: Integer, isStatelessTrigger: Boolean};
VertexClass rsl.rsldomainelements.uielements.UIContainer: rsl.rsldomainelements.uielements.UIElement;
VertexClass rsl.rsldomainelements.uielements.UIElement: rsl.rsldomainelements.notions.Notion {hasAutoContent: Boolean, isMandatory: Boolean};
VertexClass rsl.rsldomainelements.uielements.UIElementRepresentation: rsl.rslkernel.elements.ElementRepresentation;
VertexClass rsl.rsldomainelements.uielements.UIPresentationUnit: rsl.rsldomainelements.uielements.UIContainer;
VertexClass rsl.rsldomainelements.domainelementrepresentations.DomainElementRepresentation: rsl.rslkernel.elements.ElementRepresentation;
VertexClass rsl.rsldomainelements.phrases.ComplexVerbPhrase: rsl.rsldomainelements.phrases.VerbPhrase;
VertexClass rsl.rsldomainelements.phrases.DeterminerLink: rsl.rsldomainelements.terms.TermHyperlink;
VertexClass rsl.rsldomainelements.phrases.ModifierLink: rsl.rsldomainelements.terms.TermHyperlink;
VertexClass rsl.rsldomainelements.phrases.NounLink: rsl.rsldomainelements.terms.TermHyperlink;
VertexClass rsl.rsldomainelements.phrases.NounPhrase: rsl.rsldomainelements.phrases.Phrase;
VertexClass rsl.rsldomainelements.phrases.Phrase: rsl.rslkernel.elements.SentenceOrPhrase, rsl.rslkernel.elements.TermOrPhrase;
VertexClass rsl.rsldomainelements.phrases.PhraseHyperlink: rsl.rslkernel.elements.Hyperlink;
VertexClass rsl.rsldomainelements.phrases.PhrasePrepositionLink: rsl.rsldomainelements.terms.TermHyperlink;
VertexClass rsl.rsldomainelements.phrases.PhraseVerbLink: rsl.rsldomainelements.terms.TermHyperlink;
VertexClass rsl.rsldomainelements.phrases.SimpleVerbPhrase: rsl.rsldomainelements.phrases.VerbPhrase;
abstract VertexClass rsl.rsldomainelements.phrases.VerbPhrase: rsl.rsldomainelements.phrases.Phrase;
VertexClass rsl.rsldomainelements.terms.Article: rsl.rsldomainelements.terms.Determiner;
VertexClass rsl.rsldomainelements.terms.ConditionalConjunction: rsl.rsldomainelements.terms.Term;
VertexClass rsl.rsldomainelements.terms.Determiner: rsl.rsldomainelements.terms.Term;
VertexClass rsl.rsldomainelements.terms.Lemma: sclkernel.SCLElement;
VertexClass rsl.rsldomainelements.terms.Lexeme: sclkernel.SCLElement {language: String};
VertexClass rsl.rsldomainelements.terms.ModalVerb: rsl.rsldomainelements.terms.Term;
VertexClass rsl.rsldomainelements.terms.Modifier: rsl.rsldomainelements.terms.Term;
VertexClass rsl.rsldomainelements.terms.Noun: rsl.rsldomainelements.terms.Term;
VertexClass rsl.rsldomainelements.terms.Preposition: rsl.rsldomainelements.terms.Term;
VertexClass rsl.rsldomainelements.terms.Quantifier: rsl.rsldomainelements.terms.Determiner;
abstract VertexClass rsl.rsldomainelements.terms.Term: rsl.rslkernel.elements.TermOrPhrase {key: String, name: String, synonymUid: Long};
// The attribute "value" models the value of that hyperlink, for example "customers" for a NounHyperlink which links to the Noun "customer". The other attributes model the inflection of that value. In the example, case could be "nominativ", gender "male", number "plural" while "tense", "mood" and "person" would not affect a Noun. 
abstract VertexClass rsl.rsldomainelements.terms.TermHyperlink: rsl.rslkernel.elements.Hyperlink {value: String};
VertexClass rsl.rsldomainelements.terms.Terminology: rsl.rslkernel.elements.RepresentableElementsPackage;
VertexClass rsl.rsldomainelements.terms.Verb: rsl.rsldomainelements.terms.Term;
// Written in UML
VertexClass sclkernel.ArchitecturalModel: sclkernel.SoftwareArtifact;
VertexClass sclkernel.Clipboard: sclkernel.SCLElement {name: String};
// Written in UML
VertexClass sclkernel.DetailedDesignModel: sclkernel.SoftwareArtifact;
VertexClass sclkernel.Implements: sclkernel.TraceabilityLink;
VertexClass sclkernel.IsAllocatedTo: sclkernel.TraceabilityLink;
VertexClass sclkernel.IsDependentOn: sclkernel.TraceabilityLink;
// A SCLElement has a uniqueId so it can be identified even if the model changes over time.
abstract VertexClass sclkernel.SCLElement {uid: String};
abstract VertexClass sclkernel.SCLElementsPackage: sclkernel.SCLElement {name: String};
abstract VertexClass sclkernel.SCLRelationship {uid: String};
VertexClass sclkernel.Satisfies: sclkernel.TraceabilityLink;
abstract VertexClass sclkernel.SoftwareArtifact: sclkernel.SCLElementsPackage;
VertexClass sclkernel.SoftwareCase: sclkernel.SCLElementsPackage;
// Written in Java
VertexClass sclkernel.SourceCode: sclkernel.SoftwareArtifact;
VertexClass sclkernel.TraceabilityLink: sclkernel.SCLRelationship {isGenerated: Boolean};
// Written in MOLA
VertexClass sclkernel.Transformations: sclkernel.SoftwareArtifact;
VertexClass ea.Attribute: ea.ClassifiedObject {allowDuplicates: Boolean, defaultValue: String, isConst: Boolean, isDerived: Boolean, isOrdered: Boolean, isStatic: Boolean, lowerBound: String, upperBound: String, visibility: String};
abstract VertexClass ea.ClassifiedObject: ea.TaggedObject;
VertexClass ea.Connector: ea.TaggedObject {direction: String, sequenceNo: Integer, subtype: String, transitionGuard: String};
VertexClass ea.ConnectorEnd: ea.TaggedObject {aggregation: Integer, allowDuplicates: String, cardinality: String, constraint: String, derived: Boolean, derivedUnion: Boolean, isChangable: Boolean, isNavigable: Boolean, navigable: String, ordering: Integer, qualifier: String, roleType: String, visibility: String};
abstract VertexClass ea.EAObject {guid: String, name: String};
VertexClass ea.Element: ea.ClassifiedObject {genType: String, isAbstract: Boolean, isLeaf: Boolean, subtype: Integer, tag: String, visibility: String};
VertexClass ea.Method: ea.ClassifiedObject {isAbstract: Boolean, isStatic: Boolean, throwsException: String, visibility: String};
VertexClass ea.Model: ea.Package;
VertexClass ea.Package: ea.EAObject;
VertexClass ea.Parameter: ea.ClassifiedObject {defaultValue: String, kind: String, position: Integer};
abstract VertexClass ea.TaggedObject: ea.EAObject {stereotype: String, type: String};
VertexClass ea.TaggedValue: ea.EAObject {value: String};
abstract VertexClass uml.action.basicactions.Action: uml.activities.basicactivities.ActivityNode;
abstract VertexClass uml.action.basicactions.CallAction: uml.action.basicactions.InvocationAction {isSynchronous: Boolean};
VertexClass uml.action.basicactions.CallBehaviorAction: uml.action.basicactions.CallAction;
abstract VertexClass uml.action.basicactions.InvocationAction: uml.action.basicactions.Action;
VertexClass uml.action.basicactions.OpaqueAction: uml.action.basicactions.Action {body: String, language: String};
VertexClass uml.activities.basicactivities.Activity: uml.commonbehaviors.basicbehaviors.Behavior {isReadOnly: Boolean};
abstract VertexClass uml.activities.basicactivities.ActivityEdge: uml.classes.kernel.RedefinableElement;
VertexClass uml.activities.basicactivities.ActivityFinalNode: uml.activities.basicactivities.ControlNode;
abstract VertexClass uml.activities.basicactivities.ActivityGroup: uml.classes.kernel.Element;
abstract VertexClass uml.activities.basicactivities.ActivityNode: uml.classes.kernel.RedefinableElement;
VertexClass uml.activities.basicactivities.ControlFlow: uml.activities.basicactivities.ActivityEdge;
abstract VertexClass uml.activities.basicactivities.ControlNode: uml.activities.basicactivities.ActivityNode;
VertexClass uml.activities.basicactivities.InitialNode: uml.activities.basicactivities.ControlNode;
VertexClass uml.activities.intermediateactivities.ActivityPartition: uml.activities.basicactivities.ActivityGroup, uml.classes.kernel.NamedElement {isDimension: Boolean, isExternal: Boolean};
VertexClass uml.auxiliaryconstructs.models.Model: uml.classes.kernel.Package {viewpoint: String};
VertexClass uml.classes.dependencies.Abstraction: uml.classes.dependencies.Dependency;
VertexClass uml.classes.dependencies.Dependency: uml.classes.kernel.DirectedRelationship, uml.classes.kernel.PackagableElement;
VertexClass uml.classes.dependencies.Realization: uml.classes.dependencies.Abstraction;
VertexClass uml.classes.dependencies.Usage: uml.classes.dependencies.Dependency;
VertexClass uml.classes.interfaces.Interface: uml.classes.kernel.Classifier;
VertexClass uml.classes.interfaces.InterfaceRealization: uml.classes.dependencies.Realization;
VertexClass uml.classes.kernel.Association: uml.classes.kernel.Classifier, uml.classes.kernel.Relationship {isDerived: Boolean};
abstract VertexClass uml.classes.kernel.BehavioralFeature: uml.classes.kernel.Feature, uml.classes.kernel.Namespace;
VertexClass uml.classes.kernel.Class: uml.classes.kernel.Classifier, uml.commonbehaviors.basicbehaviors.BehavioredClassifier, uml.compositestructures.ports.EncapsulatedClassifier;
abstract VertexClass uml.classes.kernel.Classifier: uml.classes.kernel.Namespace, uml.classes.kernel.RedefinableElement, uml.classes.kernel.Type {isAbstract: Boolean};
VertexClass uml.classes.kernel.Comment: uml.classes.kernel.Element {body: String};
VertexClass uml.classes.kernel.Constraint: uml.classes.kernel.PackagableElement;
VertexClass uml.classes.kernel.DataType: uml.classes.kernel.Classifier;
abstract VertexClass uml.classes.kernel.DirectedRelationship: uml.classes.kernel.Relationship;
abstract VertexClass uml.classes.kernel.Element: sclkernel.SCLElement;
VertexClass uml.classes.kernel.ElementImport: uml.classes.kernel.DirectedRelationship {alias: String, visibility: uml.classes.kernel.VisibilityKind};
VertexClass uml.classes.kernel.Enumeration: uml.classes.kernel.DataType;
VertexClass uml.classes.kernel.EnumerationLiteral: uml.classes.kernel.InstanceSpecification;
VertexClass uml.classes.kernel.Expression: uml.classes.kernel.ValueSpecification {symbol: String};
abstract VertexClass uml.classes.kernel.Feature: uml.classes.kernel.RedefinableElement {isStatic: Boolean};
VertexClass uml.classes.kernel.Generalization: uml.classes.kernel.DirectedRelationship {isSubstitutable: Boolean};
VertexClass uml.classes.kernel.InstanceSpecification: uml.classes.kernel.PackagableElement;
VertexClass uml.classes.kernel.InstanceValue: uml.classes.kernel.ValueSpecification;
VertexClass uml.classes.kernel.LiteralBoolean: uml.classes.kernel.LiteralSpecification {value: Boolean};
VertexClass uml.classes.kernel.LiteralInteger: uml.classes.kernel.LiteralSpecification {value: Integer};
VertexClass uml.classes.kernel.LiteralNull: uml.classes.kernel.LiteralSpecification;
abstract VertexClass uml.classes.kernel.LiteralSpecification: uml.classes.kernel.ValueSpecification;
VertexClass uml.classes.kernel.LiteralString: uml.classes.kernel.LiteralSpecification {value: String};
VertexClass uml.classes.kernel.LiteralUnlimitedNatural: uml.classes.kernel.LiteralSpecification {value: String};
abstract VertexClass uml.classes.kernel.MultiplicityElement: uml.classes.kernel.Element {isOrdered: Boolean, isUnique: Boolean};
abstract VertexClass uml.classes.kernel.NamedElement: uml.classes.kernel.Element {name: String, visibility: uml.classes.kernel.VisibilityKind};
abstract VertexClass uml.classes.kernel.Namespace: uml.classes.kernel.NamedElement;
VertexClass uml.classes.kernel.OpaqueExpression: uml.classes.kernel.ValueSpecification {body: String, language: String};
VertexClass uml.classes.kernel.Operation: uml.classes.kernel.BehavioralFeature {isQuery: Boolean};
abstract VertexClass uml.classes.kernel.PackagableElement: uml.classes.kernel.NamedElement;
VertexClass uml.classes.kernel.Package: uml.classes.kernel.Namespace, uml.classes.kernel.PackagableElement;
VertexClass uml.classes.kernel.PackageImport: uml.classes.kernel.DirectedRelationship {visibility: uml.classes.kernel.VisibilityKind};
VertexClass uml.classes.kernel.Parameter: uml.classes.kernel.MultiplicityElement, uml.classes.kernel.TypedElement {direction: uml.classes.kernel.ParameterDirectionKind};
VertexClass uml.classes.kernel.PrimitiveType: uml.classes.kernel.DataType;
VertexClass uml.classes.kernel.Property: uml.classes.kernel.StructuralFeature, uml.compositestructures.internalstructures.ConnectableElement {aggregation: uml.classes.kernel.AggregationKind, isDerived: Boolean, isDerivedUnion: Boolean};
abstract VertexClass uml.classes.kernel.RedefinableElement: uml.classes.kernel.NamedElement {isLeaf: Boolean};
abstract VertexClass uml.classes.kernel.Relationship: uml.classes.kernel.Element;
VertexClass uml.classes.kernel.Stereotype: uml.classes.kernel.Element {keywords: String};
abstract VertexClass uml.classes.kernel.StructuralFeature: uml.classes.kernel.Feature, uml.classes.kernel.MultiplicityElement, uml.classes.kernel.TypedElement {isReadOnly: Boolean};
abstract VertexClass uml.classes.kernel.Type: uml.classes.kernel.PackagableElement;
abstract VertexClass uml.classes.kernel.TypedElement: uml.classes.kernel.NamedElement;
abstract VertexClass uml.classes.kernel.ValueSpecification: uml.classes.kernel.PackagableElement, uml.classes.kernel.TypedElement;
abstract VertexClass uml.commonbehaviors.basicbehaviors.Behavior: uml.classes.kernel.Class {isReentrant: Boolean};
abstract VertexClass uml.commonbehaviors.basicbehaviors.BehavioredClassifier: uml.classes.kernel.Classifier;
abstract VertexClass uml.commonbehaviors.communications.Event: uml.classes.kernel.PackagableElement;
abstract VertexClass uml.commonbehaviors.communications.MessageEvent: uml.commonbehaviors.communications.Event;
VertexClass uml.components.basiccomponents.Component: uml.classes.kernel.Class {isIndirectlyInstantiated: Boolean};
VertexClass uml.components.basiccomponents.ComponentRealization: uml.classes.dependencies.Realization;
VertexClass uml.compositestructures.collaborations.Collaboration: uml.commonbehaviors.basicbehaviors.BehavioredClassifier, uml.compositestructures.internalstructures.StructuredClassifier;
abstract VertexClass uml.compositestructures.internalstructures.ConnectableElement: uml.classes.kernel.TypedElement;
VertexClass uml.compositestructures.internalstructures.Connector: uml.classes.kernel.Feature {kind: uml.components.basiccomponents.ConnectorKind};
VertexClass uml.compositestructures.internalstructures.ConnectorEnd: uml.classes.kernel.MultiplicityElement;
abstract VertexClass uml.compositestructures.internalstructures.StructuredClassifier: uml.classes.kernel.Classifier;
abstract VertexClass uml.compositestructures.ports.EncapsulatedClassifier: uml.compositestructures.internalstructures.StructuredClassifier;
VertexClass uml.interactions.basicinteractions.BehaviorExecutionSpecification: uml.interactions.basicinteractions.ExecutionSpecification;
VertexClass uml.interactions.basicinteractions.CreationEvent: uml.commonbehaviors.communications.Event;
VertexClass uml.interactions.basicinteractions.DestructionEvent: uml.commonbehaviors.communications.Event;
abstract VertexClass uml.interactions.basicinteractions.ExecutionSpecification: uml.interactions.basicinteractions.InteractionFragment;
VertexClass uml.interactions.basicinteractions.Interaction: uml.commonbehaviors.basicbehaviors.Behavior, uml.interactions.basicinteractions.InteractionFragment;
abstract VertexClass uml.interactions.basicinteractions.InteractionFragment: uml.classes.kernel.NamedElement;
VertexClass uml.interactions.basicinteractions.Lifeline: uml.classes.kernel.NamedElement;
VertexClass uml.interactions.basicinteractions.Message: uml.classes.kernel.NamedElement {messageSort: uml.interactions.basicinteractions.MessageSort};
abstract VertexClass uml.interactions.basicinteractions.MessageEnd: uml.classes.kernel.NamedElement;
VertexClass uml.interactions.basicinteractions.MessageOccurrenceSpecification: uml.interactions.basicinteractions.MessageEnd, uml.interactions.basicinteractions.OccurrenceSpecification;
VertexClass uml.interactions.basicinteractions.OccurrenceSpecification: uml.interactions.basicinteractions.InteractionFragment;
VertexClass uml.interactions.basicinteractions.ReceiveOperationEvent: uml.commonbehaviors.communications.MessageEvent;
VertexClass uml.interactions.basicinteractions.SendOperationEvent: uml.commonbehaviors.communications.MessageEvent;
VertexClass uml.interactions.fragments.CombinedFragment: uml.interactions.basicinteractions.InteractionFragment;
VertexClass uml.interactions.fragments.InteractionConstraint: uml.classes.kernel.Constraint;
VertexClass uml.interactions.fragments.InteractionOperand: uml.classes.kernel.Namespace, uml.interactions.basicinteractions.InteractionFragment;
VertexClass uml.usecases.Actor: uml.commonbehaviors.basicbehaviors.BehavioredClassifier;
VertexClass uml.usecases.Extend: uml.classes.kernel.DirectedRelationship, uml.classes.kernel.NamedElement;
VertexClass uml.usecases.ExtensionPoint: uml.classes.kernel.RedefinableElement;
VertexClass uml.usecases.Include: uml.classes.kernel.DirectedRelationship, uml.classes.kernel.NamedElement;
VertexClass uml.usecases.UseCase: uml.commonbehaviors.basicbehaviors.BehavioredClassifier;
EdgeClass java5.annotations.IsAnnotationOfType from java5.annotations.Annotation (0,*) to java5.types.Type (1,1) role type;
EdgeClass java5.annotations.IsAnnotationOfVariable from java5.annotations.Annotation (0,*) to java5.statements.Declaration (1,1) role declaration;
EdgeClass java5.annotations.IsAnnotationOfMember from java5.annotations.Annotation (0,*) to java5.members.Member (1,1) role member;
EdgeClass java5.annotations.IsAnnotationOfEnumConstant from java5.annotations.Annotation (1,1) to java5.members.EnumConstant (1,1) role enumconstant;
EdgeClass java5.annotations.IsMetaAnnotationOf from java5.annotations.Annotation (0,*) to java5.types.AnnotationDefinition (1,1) role annotationdefinition;
EdgeClass java5.annotations.IsAnnotationOfPackage from java5.annotations.Annotation (0,*) to java5.programs.JavaPackage (1,1) role package;
EdgeClass java5.annotations.IsAnnotationArgumentOf from java5.expressions.Expression (0,*) to java5.annotations.Annotation (1,1) role fullannotation;
EdgeClass java5.annotations.IsAnnotationNameOf from java5.basiclanguageelements.Identifier (1,1) to java5.annotations.Annotation (1,1) role annotation;
EdgeClass java5.basiclanguageelements.IsEnumBlockOf from java5.basiclanguageelements.Block (1,1) to java5.types.EnumDefinition (1,1) role enumdefinition;
EdgeClass java5.basiclanguageelements.IsAnnotationBlockOf from java5.basiclanguageelements.Block (1,1) to java5.types.AnnotationDefinition (1,1) role annotationdefinition;
EdgeClass java5.basiclanguageelements.IsClassBlockOf from java5.basiclanguageelements.Block (1,1) to java5.types.ClassDefinition (1,1) role classdefinition;
EdgeClass java5.basiclanguageelements.IsEnumConstantBlockOf from java5.basiclanguageelements.Block (1,1) to java5.members.EnumConstant (0,*);
EdgeClass java5.basiclanguageelements.IsInterfaceBlockOf from java5.basiclanguageelements.Block (1,1) to java5.types.InterfaceDefinition (1,1) role interfacedefinition;
EdgeClass java5.basiclanguageelements.IsMemberOf from java5.members.Member (0,*) to java5.basiclanguageelements.Block (1,1);
EdgeClass java5.basiclanguageelements.IsFieldNameOf from java5.basiclanguageelements.Identifier (1,1) to java5.expressions.FieldAccess (1,1) role fieldaccess;
EdgeClass java5.basiclanguageelements.IsLabelNameOf from java5.basiclanguageelements.Identifier (1,1) to java5.statements.Label (1,1) role labelattachedstatement;
EdgeClass java5.basiclanguageelements.IsTypeParameterDeclarationNameOf from java5.basiclanguageelements.Identifier (1,1) to java5.typespecifications.TypeParameterDeclaration (1,1);
EdgeClass java5.basiclanguageelements.IsNameOfInvocatedMethod from java5.basiclanguageelements.Identifier (1,1) to java5.expressions.MethodInvocation (1,1) role methodinvocation;
EdgeClass java5.basiclanguageelements.IsTypeNameOf from java5.basiclanguageelements.Identifier (1,1) to java5.basiclanguageelements.QualifiedType (1,1);
EdgeClass java5.basiclanguageelements.IsTypeParameterUsageNameOf from java5.basiclanguageelements.Identifier (1,1) to java5.typespecifications.TypeParameterUsage (1,1);
EdgeClass java5.basiclanguageelements.IsEnumConstantNameOf from java5.basiclanguageelements.Identifier (1,1) to java5.members.EnumConstant (1,1) role enumconstant;
EdgeClass java5.basiclanguageelements.IsBreakTargetOf from java5.basiclanguageelements.Identifier (0,1) to java5.statements.Break (1,1) role breakstatement;
EdgeClass java5.basiclanguageelements.IsParameterNameOf from java5.basiclanguageelements.Identifier (1,1) to java5.basiclanguageelements.ParameterDeclaration (1,1);
EdgeClass java5.basiclanguageelements.IsContinueTargetOf from java5.basiclanguageelements.Identifier (0,1) to java5.statements.Continue (1,1) role continuestatement;
EdgeClass java5.basiclanguageelements.IsAnnotationDefinitionNameOf from java5.basiclanguageelements.Identifier (1,1) to java5.types.AnnotationDefinition (1,1) role annotationdefinition;
EdgeClass java5.basiclanguageelements.IsClassNameOf from java5.basiclanguageelements.Identifier (1,1) to java5.types.ClassDefinition (1,1) role classdefinition;
EdgeClass java5.basiclanguageelements.IsNameOfMethod from java5.basiclanguageelements.Identifier (1,1) to java5.members.MethodDeclaration (1,1) role methoddeclaration;
EdgeClass java5.basiclanguageelements.IsVariableNameOf from java5.basiclanguageelements.Identifier (1,*) to java5.statements.Declaration (1,1) role declaration;
EdgeClass java5.basiclanguageelements.IsEnumNameOf from java5.basiclanguageelements.Identifier (1,1) to java5.types.EnumDefinition (1,1) role enumdefinition;
EdgeClass java5.basiclanguageelements.IsNameOfConstructor from java5.basiclanguageelements.Identifier (1,1) to java5.members.ConstructorDefinition (1,1) role constructordeclaration;
EdgeClass java5.basiclanguageelements.IsInterfaceNameOf from java5.basiclanguageelements.Identifier (1,1) to java5.types.InterfaceDefinition (1,1) role interfacedefinition;
EdgeClass java5.basiclanguageelements.IsModifierOfAnnotation from java5.basiclanguageelements.JavaModifier (0,*) to java5.types.AnnotationDefinition (1,1) role annotationdefinition;
EdgeClass java5.basiclanguageelements.IsModifierOfConstructor from java5.basiclanguageelements.JavaModifier (0,*) to java5.members.ConstructorDefinition (1,1) role constructordeclaration;
EdgeClass java5.basiclanguageelements.IsModifierOfInterface from java5.basiclanguageelements.JavaModifier (0,2) to java5.types.InterfaceDefinition (1,1) role interfacedefinition;
EdgeClass java5.basiclanguageelements.IsModifierOfMethod from java5.basiclanguageelements.JavaModifier (0,*) to java5.members.MethodDeclaration (1,1) role methoddeclaration;
EdgeClass java5.basiclanguageelements.IsModifierOfParameter from java5.basiclanguageelements.JavaModifier (0,1) to java5.basiclanguageelements.ParameterDeclaration (1,1);
EdgeClass java5.basiclanguageelements.IsModifierOfVariable from java5.basiclanguageelements.JavaModifier (0,*) to java5.statements.Declaration (1,1) role declaration;
EdgeClass java5.basiclanguageelements.IsModifierOfEnum from java5.basiclanguageelements.JavaModifier (0,*) to java5.types.EnumDefinition (1,1) role enumdefinition;
EdgeClass java5.basiclanguageelements.IsModifierOfClass from java5.basiclanguageelements.JavaModifier (0,*) to java5.types.ClassDefinition (1,1) role classdefinition;
EdgeClass java5.basiclanguageelements.IsParameterOfMethod from java5.basiclanguageelements.ParameterDeclaration (0,*) to java5.members.MethodDeclaration (1,1) role methoddeclaration;
EdgeClass java5.basiclanguageelements.IsParameterOfForEachClause from java5.basiclanguageelements.ParameterDeclaration (1,1) to java5.statements.ForEachClause (1,1) role foreachclause;
EdgeClass java5.basiclanguageelements.IsParameterOfConstructor from java5.basiclanguageelements.ParameterDeclaration (0,*) to java5.members.ConstructorDefinition (1,1) role constructordeclaration;
EdgeClass java5.basiclanguageelements.IsCaughtExceptionOf from java5.basiclanguageelements.ParameterDeclaration (1,1) to java5.statements.Catch (1,1) role catchstatement;
EdgeClass java5.basiclanguageelements.IsTypeOfParameter from java5.typespecifications.TypeSpecification (1,1) to java5.basiclanguageelements.ParameterDeclaration (1,1) role parameterdeclaration;
EdgeClass java5.basiclanguageelements.IsImportDefinitionOf from java5.basiclanguageelements.QualifiedName (1,1) to java5.programs.Import (1,1) role translationunit;
EdgeClass java5.basiclanguageelements.IsQualifiedTypeOf from java5.basiclanguageelements.QualifiedType (0,1) to java5.basiclanguageelements.QualifiedType (1,1);
EdgeClass java5.comments.IsCommentIn from java5.comments.Comment (0,*) to java5.programs.SourceFile (1,1);
EdgeClass java5.expressions.IsTypeArgumentOfArrayCreation from java5.typespecifications.TypeArgument (0,1) to java5.expressions.ArrayCreation (1,1) role argumentArraycreation;
EdgeClass java5.expressions.IsDimensionInitializerOf from java5.expressions.ArrayInitializer (1,*) to java5.expressions.ArrayCreation (1,1);
EdgeClass java5.expressions.IsTypeOfCreatedArray from java5.typespecifications.TypeSpecification (0,1) to java5.expressions.ArrayCreation (1,1) role arraycreation;
EdgeClass java5.expressions.IsContentOf from java5.expressions.Expression (0,*) to java5.expressions.ArrayInitializer (1,1) role arrayinitializer2;
EdgeClass java5.expressions.IsSizeOf from java5.expressions.Expression (0,0) to java5.expressions.ArrayInitializer (1,1) role arrayinitializer;
EdgeClass java5.expressions.IsCastedBuiltInTypeOf from java5.typespecifications.BuiltInType (1,1) to java5.expressions.BuiltInCast (1,1) role builtincast;
EdgeClass java5.expressions.IsCastedValueOf from java5.expressions.Expression (1,1) to java5.expressions.BuiltInCast (1,1);
EdgeClass java5.expressions.IsCastedTypeOf from java5.typespecifications.TypeSpecification (1,1) to java5.expressions.ClassCast (1,1) role classcast;
EdgeClass java5.expressions.IsCastedObjectOf from java5.expressions.Expression (1,1) to java5.expressions.ClassCast (1,1);
EdgeClass java5.expressions.IsConstructorInvocationOf from java5.expressions.MethodInvocation (1,1) to java5.expressions.ClassInstanceCreation (1,1);
EdgeClass java5.expressions.IsConditionOfExpression from java5.expressions.Expression (1,1) to java5.expressions.ConditionalExpression (1,1);
EdgeClass java5.expressions.IsMatchOf from java5.expressions.Expression (1,1) to java5.expressions.ConditionalExpression (1,1);
EdgeClass java5.expressions.IsMismatchOf from java5.expressions.Expression (1,1) to java5.expressions.ConditionalExpression (1,1);
EdgeClass java5.expressions.IsIteratorOf from java5.expressions.Expression (0,*) to java5.statements.TraditionalForClause (1,1) role traditionalforclause2;
EdgeClass java5.expressions.IsSwitchArgumentOf from java5.expressions.Expression (1,1) to java5.statements.Switch (1,1) role switchcasestatement;
EdgeClass java5.expressions.IsCaseConditionOf from java5.expressions.Expression (1,1) to java5.statements.Case (1,1) role casestatement;
EdgeClass java5.expressions.IsMessageOf from java5.expressions.Expression (0,1) to java5.statements.Assert (1,1) role assert2;
EdgeClass java5.expressions.IsConditionOfIf from java5.expressions.Expression (1,1) to java5.statements.If (1,1) role ifstatement;
EdgeClass java5.expressions.IsConditionOfWhile from java5.expressions.Expression (1,1) to java5.statements.While (1,1) role whilestatement;
EdgeClass java5.expressions.IsLeftHandSideOfInfixExpression from java5.expressions.Expression (1,1) to java5.expressions.InfixExpression (1,1);
EdgeClass java5.expressions.IsReturnedBy from java5.expressions.Expression (0,1) to java5.statements.Return (1,1) role returnstatement;
EdgeClass java5.expressions.IsMonitorOf from java5.expressions.Expression (1,1) to java5.statements.Synchronized (1,1) role synchronizestatement;
EdgeClass java5.expressions.IsLeftHandSideOfPostFixExpression from java5.expressions.Expression (1,1) to java5.expressions.PostfixExpression (1,1);
EdgeClass java5.expressions.IsConditionOfDoWhile from java5.expressions.Expression (1,1) to java5.statements.DoWhile (1,1) role dowhilestatement;
EdgeClass java5.expressions.IsFieldContainerOf from java5.expressions.Expression (0,1) to java5.expressions.FieldAccess (1,1);
EdgeClass java5.expressions.IsInitializerOf from java5.expressions.Expression (1,1) to java5.expressions.VariableInitializer (1,1);
EdgeClass java5.expressions.IsArgumentOfEnumConstant from java5.expressions.Expression (0,*) to java5.members.EnumConstant (1,1) role enumconstant;
EdgeClass java5.expressions.IsEnumeratableOf from java5.expressions.Expression (1,1) to java5.statements.ForEachClause (1,1) role foreachclause;
EdgeClass java5.expressions.IsMethodContainerOf from java5.expressions.Expression (0,1) to java5.expressions.MethodInvocation (1,1);
EdgeClass java5.expressions.IsConditionOfAssert from java5.expressions.Expression (1,1) to java5.statements.Assert (1,1) role assert;
EdgeClass java5.expressions.IsArrayElementIndexOf from java5.expressions.Expression (0,*) to java5.expressions.FieldAccess (1,1);
EdgeClass java5.expressions.IsInitializerOfVariable from java5.expressions.Expression (0,1) to java5.statements.Declaration (1,1) role declaration;
EdgeClass java5.expressions.IsArgumentOfMethodInvocation from java5.expressions.Expression (0,*) to java5.expressions.MethodInvocation (1,1);
EdgeClass java5.expressions.IsRightHandSideOfPrefixExpression from java5.expressions.Expression (1,1) to java5.expressions.PrefixExpression (1,1);
EdgeClass java5.expressions.IsThrownExceptionOf from java5.expressions.Expression (1,1) to java5.statements.Throw (1,1) role throwstatement;
EdgeClass java5.expressions.IsForConditionOf from java5.expressions.Expression (0,1) to java5.statements.TraditionalForClause (1,1) role traditionalforclause;
EdgeClass java5.expressions.IsRightHandSideOfInfixExpression from java5.expressions.Expression (1,1) to java5.expressions.InfixExpression (1,1);
EdgeClass java5.expressions.IsTypeArgumentOfMethodInvocation from java5.typespecifications.TypeArgument (0,1) to java5.expressions.MethodInvocation (1,1) role classinstancecreation;
EdgeClass java5.members.IsBodyOfConstructor from java5.statements.Compound (1,1) to java5.members.ConstructorDefinition (1,1) role constructordeclaration;
EdgeClass java5.members.IsTypeParameterOfConstructor from java5.typespecifications.TypeSpecification (0,*) to java5.members.ConstructorDefinition (1,1) role constructordefinition;
EdgeClass java5.members.IsExceptionThrownByConstructor from java5.typespecifications.TypeSpecification (0,*) to java5.members.ConstructorDefinition (1,1) role constructordeclaration;
EdgeClass java5.members.IsFieldCreationOf from java5.statements.Statement (1,1) to java5.members.Field (1,1) role field;
EdgeClass java5.members.IsExceptionThrownByMethod from java5.typespecifications.TypeSpecification (0,*) to java5.members.MethodDeclaration (1,1) role throwsclause;
EdgeClass java5.members.IsReturnTypeOf from java5.typespecifications.TypeSpecification (1,1) to java5.members.MethodDeclaration (1,1) role methoddeclaration;
EdgeClass java5.members.IsTypeParameterOfMethod from java5.typespecifications.TypeSpecification (0,*) to java5.members.MethodDeclaration (1,1) role methoddeclaration2;
EdgeClass java5.members.IsBodyOfMethod from java5.statements.Compound (1,1) to java5.members.MethodDefinition (1,1) role methoddeclaration;
EdgeClass java5.members.IsBodyOfStaticConstructor from java5.statements.Compound (1,1) to java5.members.StaticConstructor (1,1) role staticconstructor;
EdgeClass java5.members.IsBodyOfStaticInitializer from java5.statements.Compound (1,1) to java5.members.StaticInitializer (1,1) role classinitializer;
EdgeClass java5.programs.IsExternalDeclarationIn from java5.programs.ExternalDeclaration (0,*) to java5.programs.SourceUsage (1,1);
EdgeClass java5.programs.IsSubPackageOf from java5.programs.JavaPackage (0,*) to java5.programs.JavaPackage (0,1);
EdgeClass java5.programs.IsPackageOf from java5.programs.JavaPackage (1,*) to java5.programs.Program (1,*);
EdgeClass java5.programs.IsPartOf from java5.programs.TranslationUnit (1,*) to java5.programs.JavaPackage (1,1);
EdgeClass java5.programs.IsTranslationUnitIn from java5.programs.TranslationUnit (1,*) to java5.programs.Program (1,1);
EdgeClass java5.programs.IsPrimarySourceFor from java5.programs.SourceFile (1,1) to java5.programs.TranslationUnit (1,1);
EdgeClass java5.programs.IsSourceFor from java5.programs.SourceFile (1,1) to java5.programs.SourceUsage (1,*);
EdgeClass java5.programs.IsSourceUsageIn from java5.programs.SourceUsage (0,*) to java5.programs.TranslationUnit (1,1);
EdgeClass java5.programs.IncludesSource from java5.programs.SourceUsage (0,1) to java5.programs.SourceUsage (0,*);
EdgeClass java5.statements.IsCaseOf from java5.statements.Case (0,*) to java5.statements.Switch (1,1);
EdgeClass java5.statements.IsStatementOfCase from java5.statements.Statement (0,*) to java5.statements.Case (1,1);
EdgeClass java5.statements.IsHandlerOf from java5.statements.Catch (0,*) to java5.statements.Try (1,1);
EdgeClass java5.statements.IsCatchBodyOf from java5.statements.Compound (1,1) to java5.statements.Catch (1,1);
EdgeClass java5.statements.IsSynchronizedBodyOf from java5.statements.Compound (1,1) to java5.statements.Synchronized (1,1);
EdgeClass java5.statements.IsFinallyBodyOf from java5.statements.Compound (0,1) to java5.statements.Try (1,1);
EdgeClass java5.statements.IsTryBodyOf from java5.statements.Compound (1,1) to java5.statements.Try (1,1);
EdgeClass java5.statements.IsStatementOfCompound from java5.statements.Statement (0,*) to java5.statements.Compound (1,1);
EdgeClass java5.statements.IsTypeArgumentOfVariable from java5.typespecifications.TypeArgument (0,*) to java5.statements.Declaration (1,1) role argumentDeclaration;
EdgeClass java5.statements.IsTypeOfVariable from java5.typespecifications.TypeSpecification (1,1) to java5.statements.Declaration (1,1) role declaration;
EdgeClass java5.statements.IsDefaultCaseOf from java5.statements.Default (0,1) to java5.statements.Switch (1,1);
EdgeClass java5.statements.IsStatementOfDefaultCase from java5.statements.Statement (0,*) to java5.statements.Default (1,1);
EdgeClass java5.statements.IsLoopBodyOfDoWhile from java5.statements.Statement (1,1) to java5.statements.DoWhile (1,1);
EdgeClass java5.statements.IsHeadOfFor from java5.statements.ForHead (1,1) to java5.statements.ForStatement (1,1);
EdgeClass java5.statements.IsLoopBodyOfFor from java5.statements.Statement (1,1) to java5.statements.ForStatement (1,1);
EdgeClass java5.statements.IsThenOf from java5.statements.Statement (1,1) to java5.statements.If (1,1);
EdgeClass java5.statements.IsElseOf from java5.statements.Statement (0,1) to java5.statements.If (1,1);
EdgeClass java5.statements.IsAttachedTo from java5.statements.Statement (1,1) to java5.statements.Label (1,1);
EdgeClass java5.statements.IsLoopBodyOfWhile from java5.statements.Statement (1,1) to java5.statements.While (1,1);
EdgeClass java5.statements.IsRunVariableInitializationOf from java5.statements.Statement (0,*) to java5.statements.TraditionalForClause (1,1);
EdgeClass java5.types.IsSuperClassOfClass from java5.typespecifications.TypeSpecification (0,1) role subclass to java5.types.ClassDefinition (1,1) role superclass;
EdgeClass java5.types.IsTypeParameterOfClass from java5.typespecifications.TypeParameterDeclaration (0,*) to java5.types.ClassDefinition (1,1) role parameterClassdefinition;
EdgeClass java5.types.IsInterfaceOfClass from java5.typespecifications.TypeSpecification (0,*) role implementedInterface to java5.types.ClassDefinition (1,1) role classdefinition;
EdgeClass java5.types.IsInterfaceOfEnum from java5.typespecifications.TypeSpecification (0,*) to java5.types.EnumDefinition (1,1) role enumdefinition;
EdgeClass java5.types.IsTypeParameterOfInterface from java5.typespecifications.TypeParameterDeclaration (0,*) to java5.types.InterfaceDefinition (1,1) role parameterInterfacedefinition;
EdgeClass java5.types.IsSuperClassOfInterface from java5.typespecifications.TypeSpecification (0,*) to java5.types.InterfaceDefinition (1,1) role interfacedefinition;
EdgeClass java5.typespecifications.IsElementTypeOf from java5.typespecifications.TypeSpecification (1,1) to java5.typespecifications.ArrayType (1,1);
EdgeClass java5.typespecifications.IsSimpleArgumentOf from java5.typespecifications.SimpleArgument (0,*) to java5.typespecifications.TypeArgument (1,1);
EdgeClass java5.typespecifications.IsTypeOfSimpleArgument from java5.typespecifications.TypeSpecification (1,1) to java5.typespecifications.SimpleArgument (1,1);
EdgeClass java5.typespecifications.IsTypeArgumentOfTypeSpecification from java5.typespecifications.TypeArgument (0,*) to java5.typespecifications.TypeSpecification (1,1);
EdgeClass java5.typespecifications.IsWildcardArgumentOf from java5.typespecifications.WildcardArgument (0,*) to java5.typespecifications.TypeArgument (1,1);
EdgeClass java5.typespecifications.IsUpperBoundOfTypeParameter from java5.typespecifications.TypeSpecification (0,*) to java5.typespecifications.TypeParameterDeclaration (1,1);
EdgeClass java5.typespecifications.IsLowerBoundOfWildCardArgument from java5.typespecifications.TypeSpecification (1,1) to java5.typespecifications.WildcardArgument (1,1);
EdgeClass java5.typespecifications.TypeSpecificationLinksToWildcardArgument from java5.typespecifications.TypeSpecification (1,1) to java5.typespecifications.WildcardArgument (1,1);
EdgeClass mapping.MappingLinksToCurrentElement from mapping.Mapping (0,1) to rsl.rslkernel.elements.RepresentableElement (1,1) role currentElement;
CompositionClass mapping.MappingIsPartOfMappingTable from mapping.Mapping (1,1) to mapping.MappingTable (1,1) aggregate to;
EdgeClass mapping.MappingLinksToPastElement from mapping.Mapping (0,1) to rsl.rslkernel.elements.RepresentableElement (1,1) role pastElement;
CompositionClass mapping.SimilarityIsPartOfMapping from mapping.SimilarityValue (1,1) role similarity to mapping.Mapping (1,1) aggregate to;
CompositionClass mapping.MappingTableIsPartOfMappingInformation from mapping.MappingTable (1,1) to mapping.MappingInformation (1,1) aggregate to;
CompositionClass mapping.CurrentSoftwareCaseIsPartOfMappingInformation from sclkernel.SoftwareCase (1,1) role currentSoftwareCase to mapping.MappingInformation (1,1) aggregate to;
CompositionClass mapping.PastSoftwareCaseIsPartOfMappingInformation from sclkernel.SoftwareCase (1,1) role pastSoftwareCase to mapping.MappingInformation (1,1) aggregate to;
EdgeClass rsl.rslkernel.attributes.AttributeLinksToAttributeDefinition from rsl.rslkernel.attributes.Attribute (0,*) to rsl.rslkernel.attributes.AttributeDefinition (1,1);
// {RepresentableElement's attributes contain all Attributes with names and values corresponding to the ones in this RepresentableElement attributeSets.} 
CompositionClass rsl.rslkernel.attributes.RepresentableElementContainsAttribute from rsl.rslkernel.elements.RepresentableElement (1,1) to rsl.rslkernel.attributes.Attribute (0,*) role attribute aggregate from;
CompositionClass rsl.rslkernel.attributes.AttributeSetContainsDefinition from rsl.rslkernel.attributes.AttributeSet (0,*) to rsl.rslkernel.attributes.AttributeDefinition (0,*) role definition aggregate from;
// {RepresentableElement's attributes contain all Attributes with names and values corresponding to the ones in this RepresentableElement attributeSets.} 
EdgeClass rsl.rslkernel.attributes.RepresentableElementLinksToAttributeSet from rsl.rslkernel.elements.RepresentableElement (0,*) to rsl.rslkernel.attributes.AttributeSet (1,*) role attributeSet;
abstract CompositionClass rsl.rslkernel.elements.ElementRepresentationContainsSentence from rsl.rslkernel.elements.ElementRepresentation (0,1) to rsl.rslkernel.elements.HyperlinkedSentence (0,*) role sentence aggregate from;
abstract CompositionClass rsl.rslkernel.elements.ElementContainsRepresentation from rsl.rslkernel.elements.RepresentableElement (1,1) role element to rsl.rslkernel.elements.ElementRepresentation (1,*) role representation aggregate from;
abstract EdgeClass rsl.rslkernel.elements.HyperlinkLinksToTarget: sclkernel.SCLRelationshipLinksToTarget from rsl.rslkernel.elements.Hyperlink (0,*) to rsl.rslkernel.elements.TermOrPhrase (1,1) role target;
abstract EdgeClass rsl.rslkernel.elements.HyperlinkLinksToSource: sclkernel.SCLRelationshipLinksToSource from rsl.rslkernel.elements.Hyperlink (0,*) role hyperlink to rsl.rslkernel.elements.SentenceOrPhrase (1,1) role source;
// {Allowed HyperlinkedSentence here are:
// - NaturalLanguageSentence
// - SVOSentence
// - ModalSVOSentence
// - ConditionalSentence} 
// {Every sentence belongs to exactly one parent.} 
CompositionClass rsl.rslkernel.elements.SentenceListContainsSentence: rsl.rslkernel.elements.ElementRepresentationContainsSentence from rsl.rslrequirementrepresentations.descriptiverequirementrepresentations.SentenceList (0,1) role sentenceList to rsl.rslkernel.elements.HyperlinkedSentence (1,*) role sentence aggregate from;
abstract CompositionClass rsl.rslkernel.elements.RepresentableElementContainsName from rsl.rslkernel.elements.RepresentableElement (0,1) role representableElement to sclkernel.SCLElement (1,1) role name aggregate from;
abstract EdgeClass rsl.rslkernel.elements.InRepresentableElementRelationshipLinksToTarget: sclkernel.SCLRelationshipLinksToTarget from rsl.rslkernel.elements.RepresentableElementRelationship (0,*) role inRepresentableElementRelationship to rsl.rslkernel.elements.RepresentableElement (1,1) role target;
abstract EdgeClass rsl.rslkernel.elements.OutRepresentableElementRelationshipLinksToSource: sclkernel.SCLRelationshipLinksToSource from rsl.rslkernel.elements.RepresentableElementRelationship (0,*) role outRepresentableElementRelationship to rsl.rslkernel.elements.RepresentableElement (1,1) role source;
abstract CompositionClass rsl.rslkernel.elements.RepresentableElementsPackageContainsElement: sclkernel.SCLElementsPackageContainsElement from rsl.rslkernel.elements.RepresentableElementsPackage (1,1) to rsl.rslkernel.elements.RepresentableElement (0,*) role element aggregate from;
abstract CompositionClass rsl.rslkernel.elements.NestingPackageContainsNestedPackage: sclkernel.SCLElementsPackageContainsNestedPackage from rsl.rslkernel.elements.RepresentableElementsPackage (0,1) role nestingPackage to rsl.rslkernel.elements.RepresentableElementsPackage (0,*) role nestedPackage aggregate from;
abstract EdgeClass rsl.rslkernel.elements.ScenarioMessageLinksToMessageText from rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.ScenarioMessage (0,*) to rsl.rslkernel.elements.SentenceOrPhrase (1,1) role messageText;
abstract EdgeClass rsl.rslkernel.elements.TermHyperlinkLinksToSource: rsl.rslkernel.elements.HyperlinkLinksToSource from rsl.rsldomainelements.terms.TermHyperlink (0,*) to rsl.rslkernel.elements.SentenceOrPhrase (1,1) role source;
CompositionClass rsl.rslrequirements.requirementsspecifications.RequirementContainsName: rsl.rslkernel.elements.RepresentableElementContainsName from rsl.rslrequirements.requirementsspecifications.Requirement (0,1) role requirement to rsl.rslrequirementrepresentationsentences.representationsentences.NaturalLanguageHypertextSentence (0,1) role name aggregate from;
CompositionClass rsl.rslrequirements.requirementsspecifications.RequirementContainsRepresentation: rsl.rslkernel.elements.ElementContainsRepresentation from rsl.rslrequirements.requirementsspecifications.Requirement (1,1) role requirement to rsl.rslrequirementrepresentations.requirementrepresentations.RequirementRepresentation (1,*) role representation aggregate from;
// {source of RequirementRelationship should be different than it's target (Requirement cannot be associated with itself)} 
EdgeClass rsl.rslrequirements.requirementsspecifications.FromLinksToSource: rsl.rslkernel.elements.InRepresentableElementRelationshipLinksToTarget, rsl.rslkernel.elements.OutRepresentableElementRelationshipLinksToSource from rsl.rslrequirements.requirementrelationships.NonInvocationRelationship (0,*) role 'from to rsl.rslrequirements.requirementsspecifications.Requirement (1,1) role source;
CompositionClass rsl.rslrequirements.requirementsspecifications.PackageContainsRequirement: rsl.rslkernel.elements.RepresentableElementsPackageContainsElement from rsl.rslrequirements.requirementsspecifications.RequirementsPackage (1,1) role package to rsl.rslrequirements.requirementsspecifications.Requirement (0,*) role requirement aggregate from;
EdgeClass rsl.rslrequirements.requirementsspecifications.VocabularyLinksToSource: rsl.rslkernel.elements.OutRepresentableElementRelationshipLinksToSource from rsl.rslrequirements.requirementrelationships.RequirementVocabularyRelationship (0,*) role vocabulary to rsl.rslrequirements.requirementsspecifications.Requirement (1,1) role source;
// {source of RequirementRelationship should be different than it's target (Requirement cannot be associated with itself)} 
EdgeClass rsl.rslrequirements.requirementsspecifications.ToLinksToTarget: rsl.rslkernel.elements.InRepresentableElementRelationshipLinksToTarget from rsl.rslrequirements.requirementrelationships.NonInvocationRelationship (0,*) role 'to to rsl.rslrequirements.requirementsspecifications.Requirement (1,1) role target;
// {xor} 
CompositionClass rsl.rslrequirements.requirementsspecifications.NestingPackageContainsNestedPackage: rsl.rslkernel.elements.NestingPackageContainsNestedPackage from rsl.rslrequirements.requirementsspecifications.RequirementsPackage (0,1) role nestingPackage to rsl.rslrequirements.requirementsspecifications.RequirementsPackage (0,*) role nestedPackage aggregate from;
// {xor} 
CompositionClass rsl.rslrequirements.requirementsspecifications.RequirementsSpecificationContainsRequirementsPackage: sclkernel.SCLElementsPackageContainsElement from rsl.rslrequirements.requirementsspecifications.RequirementsSpecification (0,1) role requirementsSpecification to rsl.rslrequirements.requirementsspecifications.RequirementsPackage (0,*) role requirementsPackage aggregate from;
EdgeClass rsl.rslrequirements.requirementsspecifications.RequirementsSpecificationLinksToDomainSpecification from rsl.rslrequirements.requirementsspecifications.RequirementsSpecification (1,1) role requirementsSpecification to rsl.rsldomainelements.domainelements.DomainSpecification (1,1) role domainSpecification;
CompositionClass rsl.rslrequirements.requirementsspecifications.RslUseCaseContainsActivity: rsl.rslrequirements.requirementsspecifications.RequirementContainsRepresentation from rsl.rslrequirements.requirementsspecifications.RSLUseCase (0,1) role rslUseCase to rsl.rslrequirementrepresentations.activityrepresentations.ActivityScenario (0,1) role activity aggregate from;
CompositionClass rsl.rslrequirements.requirementsspecifications.RSLUseCaseContainsLifelineRepresentation: rsl.rslkernel.elements.ElementContainsRepresentation from rsl.rslrequirements.requirementsspecifications.RSLUseCase (1,1) to rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.InvokeLifeline (0,*) role lifelineRepresentation aggregate from;
CompositionClass rsl.rslrequirements.requirementsspecifications.RequirementContainsInteraction: rsl.rslrequirements.requirementsspecifications.RequirementContainsRepresentation from rsl.rslrequirements.requirementsspecifications.RSLUseCase (1,1) role requirement to rsl.rslrequirementrepresentations.interactionrepresentations.InteractionScenario (0,*) role interaction aggregate from;
EdgeClass rsl.rslrequirements.requirementsspecifications.UsageLinksToTarget: rsl.rslkernel.elements.InRepresentableElementRelationshipLinksToTarget from rsl.rslrequirements.usecaserelationships.Usage (1,1) role usage to rsl.rslrequirements.requirementsspecifications.RSLUseCase (1,1) role target;
EdgeClass rsl.rslrequirements.requirementsspecifications.ParticipationLinksToTarget: rsl.rslkernel.elements.InRepresentableElementRelationshipLinksToTarget from rsl.rslrequirements.usecaserelationships.Participation (0,*) role participation to rsl.rslrequirements.requirementsspecifications.RSLUseCase (1,1) role target;
// {'invokedSentence' must be contained in a RequirementRepresentation of the 'invoked' UseCase} 
EdgeClass rsl.rslrequirements.requirementsspecifications.InvokedLinksToTarget: rsl.rslkernel.elements.InRepresentableElementRelationshipLinksToTarget from rsl.rslrequirements.usecaserelationships.InvocationRelationship (0,*) role invoked to rsl.rslrequirements.requirementsspecifications.RSLUseCase (1,1) role target;
EdgeClass rsl.rslrequirements.requirementsspecifications.InvokeLinksToSource: rsl.rslkernel.elements.OutRepresentableElementRelationshipLinksToSource from rsl.rslrequirements.usecaserelationships.InvocationRelationship (0,*) role invoke to rsl.rslrequirements.requirementsspecifications.RSLUseCase (1,1) role source;
EdgeClass rsl.rslrequirements.requirementsspecifications.UIElementLinksToTriggeredUseCase from rsl.rsldomainelements.uielements.UIElement (0,*) to rsl.rslrequirements.requirementsspecifications.RSLUseCase (0,1) role triggeredUseCase;
EdgeClass rsl.rslrequirements.requirementrelationships.VocabularyLinksToTarget: rsl.rslkernel.elements.InRepresentableElementRelationshipLinksToTarget from rsl.rslrequirements.requirementrelationships.RequirementVocabularyRelationship (0,*) role vocabulary to rsl.rsldomainelements.notions.Notion (1,1) role target;
// {'invokedSentence' must be contained in a RequirementRepresentation of the 'invoked' UseCase} 
EdgeClass rsl.rslrequirements.usecaserelationships.InvocationLinksToInvokeDescription from rsl.rslrequirements.usecaserelationships.InvocationRelationship (1,1) role invocation to rsl.rslrequirementrepresentationsentences.controlsentences.InvocationSentence (1,1) role invokeDescription;
EdgeClass rsl.rslrequirements.usecaserelationships.SourceParticipationLinksToSource: rsl.rslkernel.elements.OutRepresentableElementRelationshipLinksToSource from rsl.rslrequirements.usecaserelationships.Participation (1,1) role sourceParticipation to rsl.rsldomainelements.actors.Actor (1,1) role source;
EdgeClass rsl.rslrequirements.usecaserelationships.UsageLinksToSource: rsl.rslkernel.elements.OutRepresentableElementRelationshipLinksToSource from rsl.rslrequirements.usecaserelationships.Usage (0,*) role usage to rsl.rsldomainelements.actors.Actor (1,1) role source;
// {ConstrainedLanguageScenario may contain only SVOSentence, ControlSentence or ConditionSentence but not ConditionalSentence and ModalSVOSentence} 
// {Every sentence belongs to exactly one parent.} 
CompositionClass rsl.rslrequirementrepresentations.descriptiverequirementrepresentations.ScenarioContainsScenarioStep from rsl.rslrequirementrepresentations.descriptiverequirementrepresentations.ConstrainedLanguageScenario (0,1) role scenario to rsl.rslrequirementrepresentationsentences.constrainedlanguagesentences.ConstrainedLanguageSentence (0,*) role scenarioStep aggregate from;
CompositionClass rsl.rslrequirementrepresentations.descriptiverequirementrepresentations.ConstrainedLanguageScenarioContainsStoryboard from rsl.rslrequirementrepresentations.descriptiverequirementrepresentations.ConstrainedLanguageScenario (1,1) to rsl.rslrequirementrepresentations.uibehaviourrepresentations.UIStoryboard (0,1) role storyboard aggregate from;
CompositionClass rsl.rslrequirementrepresentations.descriptiverequirementrepresentations.TextualSentencesIsPartOfSentenceList from rsl.rslrequirementrepresentationsentences.representationsentences.NaturalLanguageHypertextSentence (1,*) role textualSentences to rsl.rslrequirementrepresentations.descriptiverequirementrepresentations.SentenceList (1,1) aggregate to;
CompositionClass rsl.rslrequirementrepresentations.activityrepresentations.ScenarioContainsNode from rsl.rslrequirementrepresentations.activityrepresentations.ActivityScenario (1,1) role scenario to rsl.rslrequirementrepresentationsentences.activityrepresentation.RSLActivityNode (0,*) role node aggregate from;
CompositionClass rsl.rslrequirementrepresentations.activityrepresentations.ScenarioContainsEdge from rsl.rslrequirementrepresentations.activityrepresentations.ActivityScenario (1,1) role scenario to rsl.rslrequirementrepresentationsentences.activityrepresentation.RSLActivityEdge (0,*) role edge aggregate from;
CompositionClass rsl.rslrequirementrepresentations.interactionrepresentations.InteractionScenarioContainsMessage from rsl.rslrequirementrepresentations.interactionrepresentations.InteractionScenario (1,1) to rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.ScenarioMessage (0,*) role message aggregate from;
CompositionClass rsl.rslrequirementrepresentations.interactionrepresentations.InteractionScenarioContainsLifeline from rsl.rslrequirementrepresentations.interactionrepresentations.InteractionScenario (0,*) to rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.InteractionRepresentationLifeline (1,1) role lifeline aggregate from;
CompositionClass rsl.rslrequirementrepresentations.uibehaviourrepresentations.UISceneIsPartOfUIStoryboard from rsl.rslrequirementrepresentations.uibehaviourrepresentations.UIScene (1,*) to rsl.rslrequirementrepresentations.uibehaviourrepresentations.UIStoryboard (1,1) aggregate to;
// Kizito: Which are the roles for this associations? Should be more than "hastodowith".
EdgeClass rsl.rslrequirementrepresentations.uibehaviourrepresentations.UISceneLinksToSVOSentence from rsl.rslrequirementrepresentations.uibehaviourrepresentations.UIScene (0,1) to rsl.rslrequirementrepresentationsentences.svosentences.SVOSentence (1,1);
CompositionClass rsl.rslrequirementrepresentations.uibehaviourrepresentations.UISceneContainsScreenshot from rsl.rslrequirementrepresentations.uibehaviourrepresentations.UIScene (0,1) to rsl.rsldomainelements.uielements.UIPresentationUnit (0,*) role screenshot aggregate from;
EdgeClass rsl.rslrequirementrepresentations.uibehaviourrepresentations.UserActionLinksToPredecessor from rsl.rslrequirementrepresentations.uibehaviourrepresentations.UserAction (1,1) to rsl.rslrequirementrepresentations.uibehaviourrepresentations.UIScene (1,1) role predecessor;
EdgeClass rsl.rslrequirementrepresentations.uibehaviourrepresentations.UserActionLinksToSuccessor from rsl.rslrequirementrepresentations.uibehaviourrepresentations.UserAction (1,1) to rsl.rslrequirementrepresentations.uibehaviourrepresentations.UIScene (1,1) role successor;
EdgeClass rsl.rslrequirementrepresentations.uibehaviourrepresentations.UserActionLinksToTarget: sclkernel.SCLRelationshipLinksToTarget from rsl.rslrequirementrepresentations.uibehaviourrepresentations.UserAction (0,*) to rsl.rsldomainelements.uielements.UIElement (1,*) role target;
// Kizito: Which are the roles for this associations? Should be more than "hastodowith".
EdgeClass rsl.rslrequirementrepresentations.uibehaviourrepresentations.UserActionLinksToSVOSentence from rsl.rslrequirementrepresentations.uibehaviourrepresentations.UserAction (0,1) to rsl.rslrequirementrepresentationsentences.svosentences.SVOSentence (1,1);
EdgeClass rsl.rslrequirementrepresentations.uibehaviourrepresentations.UserActionLinksToSource: sclkernel.SCLRelationshipLinksToSource from rsl.rslrequirementrepresentations.uibehaviourrepresentations.UserAction (0,*) to rsl.rsldomainelements.uielements.UIElement (1,*) role source;
CompositionClass rsl.rslrequirementrepresentationsentences.constrainedlanguagesentences.EdgeContainsRejoin from rsl.rslrequirementrepresentationsentences.activityrepresentation.RSLActivityEdge (0,1) role edge to rsl.rslrequirementrepresentationsentences.constrainedlanguagesentences.RejoinSentence (0,1) role rejoin aggregate from;
EdgeClass rsl.rslrequirementrepresentationsentences.constrainedlanguagesentences.RejoinedSentenceLinksToRejoin from rsl.rslrequirementrepresentationsentences.constrainedlanguagesentences.ConstrainedLanguageSentence (1,1) role rejoinedSentence to rsl.rslrequirementrepresentationsentences.constrainedlanguagesentences.RejoinSentence (0,*) role rejoin;
CompositionClass rsl.rslrequirementrepresentationsentences.constrainedlanguagesentences.RejoinMessageContainsRejoinSentence from rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.RejoinMessage (0,1) to rsl.rslrequirementrepresentationsentences.constrainedlanguagesentences.RejoinSentence (1,1) role rejoinSentence aggregate from;
// {Every sentence belongs to exactly one parent.} 
// {Only SVOSentence and ControlSentence may be part of an RSLActivityNode} 
// {Subject of containedSentence may be partition of the RSLActivityNode} 
CompositionClass rsl.rslrequirementrepresentationsentences.constrainedlanguagesentences.NodeContainsContainedSentence from rsl.rslrequirementrepresentationsentences.activityrepresentation.RSLActivityNode (0,1) role node to rsl.rslrequirementrepresentationsentences.constrainedlanguagesentences.ConstrainedLanguageSentence (1,1) role containedSentence aggregate from;
CompositionClass rsl.rslrequirementrepresentationsentences.representationsentences.RepresentationContainsSentence: rsl.rslkernel.elements.ElementRepresentationContainsSentence from rsl.rsldomainelements.domainelementrepresentations.DomainElementRepresentation (0,1) role representation to rsl.rslrequirementrepresentationsentences.representationsentences.NaturalLanguageHypertextSentence (0,*) role sentence aggregate from;
// {and} 
CompositionClass rsl.rslrequirementrepresentationsentences.svosentences.ConditionalConjunctionIsPartOfSource: rsl.rslkernel.elements.HyperlinkLinksToSource from rsl.rslrequirementrepresentationsentences.svosentences.ConditionalConjunctionLink (0,1) role conditionalConjunction to rsl.rslrequirementrepresentationsentences.svosentences.ConditionalSentence (1,1) role source aggregate to;
CompositionClass rsl.rslrequirementrepresentationsentences.svosentences.ConjunctionLinkContainsTarget: rsl.rsldomainelements.terms.TermHyperlinkLinksToTarget from rsl.rslrequirementrepresentationsentences.svosentences.ConditionalConjunctionLink (0,*) role conjunctionLink to rsl.rsldomainelements.terms.ConditionalConjunction (1,1) role target aggregate from;
// {A conditionalClause must be a SVOSentence object, not an object of one of its subclasses.} 
// {and} 
CompositionClass rsl.rslrequirementrepresentationsentences.svosentences.ConditionalSentenceContainsConditionalClause from rsl.rslrequirementrepresentationsentences.svosentences.ConditionalSentence (1,1) role conditionalSentence to rsl.rslrequirementrepresentationsentences.svosentences.SVOSentence (0,1) role conditionalClause aggregate from;
CompositionClass rsl.rslrequirementrepresentationsentences.svosentences.OwnedSentenceContainsMainClause from rsl.rslrequirementrepresentationsentences.svosentences.ConditionalSentence (0,1) role ownedSentence to rsl.rslrequirementrepresentationsentences.svosentences.ModalSVOSentence (1,1) role mainClause aggregate from;
CompositionClass rsl.rslrequirementrepresentationsentences.svosentences.ModalVerbIsPartOfSource: rsl.rslkernel.elements.HyperlinkLinksToSource from rsl.rslrequirementrepresentationsentences.svosentences.ModalVerbLink (1,1) role modalVerb to rsl.rslrequirementrepresentationsentences.svosentences.ModalSVOSentence (1,1) role source aggregate to;
EdgeClass rsl.rslrequirementrepresentationsentences.svosentences.ModalVerbLinkLinksToTarget: rsl.rsldomainelements.terms.TermHyperlinkLinksToTarget from rsl.rslrequirementrepresentationsentences.svosentences.ModalVerbLink (0,*) role modalVerbLink to rsl.rsldomainelements.terms.ModalVerb (1,1) role target;
CompositionClass rsl.rslrequirementrepresentationsentences.svosentences.PredicateIsPartOfSource: rsl.rslkernel.elements.HyperlinkLinksToSource from rsl.rslrequirementrepresentationsentences.svosentences.Predicate (1,1) role predicate to rsl.rslrequirementrepresentationsentences.svosentences.SVOSentence (1,1) role source aggregate to;
EdgeClass rsl.rslrequirementrepresentationsentences.svosentences.LinkingPredicateLinksToDomainStatement from rsl.rslrequirementrepresentationsentences.svosentences.Predicate (0,*) role linkingPredicate to rsl.rsldomainelements.notions.DomainStatement (0,1) role domainStatement;
AggregationClass rsl.rslrequirementrepresentationsentences.svosentences.PredicateContainsTarget: rsl.rsldomainelements.phrases.PhraseHyperlinkLinksToTarget from rsl.rslrequirementrepresentationsentences.svosentences.Predicate (0,*) role predicate to rsl.rsldomainelements.phrases.VerbPhrase (1,1) role target aggregate from;
// In the original toolready metamodel, this association ends at the NounPhrase which depicts the name of an Actor or SystemElement instead of the Actor or SystemElement.
EdgeClass rsl.rslrequirementrepresentationsentences.svosentences.SentenceLinksToRecipient from rsl.rslrequirementrepresentationsentences.svosentences.SVOSentence (1,1) role sentence to rsl.rsldomainelements.domainelements.ActorOrSystemElement (0,1) role recipient;
CompositionClass rsl.rslrequirementrepresentationsentences.svosentences.SubjectIsPartOfSource: rsl.rslkernel.elements.HyperlinkLinksToSource from rsl.rslrequirementrepresentationsentences.svosentences.Subject (1,1) role subject to rsl.rslrequirementrepresentationsentences.svosentences.SVOSentence (1,1) role source aggregate to;
AggregationClass rsl.rslrequirementrepresentationsentences.svosentences.SubjectContainsTarget: rsl.rsldomainelements.phrases.PhraseHyperlinkLinksToTarget from rsl.rslrequirementrepresentationsentences.svosentences.Subject (0,*) role subject to rsl.rsldomainelements.phrases.NounPhrase (1,1) role target aggregate from;
EdgeClass rsl.rslrequirementrepresentationsentences.svosentences.LinkingSubjectLinksToDomainElement from rsl.rslrequirementrepresentationsentences.svosentences.Subject (0,*) role linkingSubject to rsl.rsldomainelements.domainelements.DomainElement (0,1) role domainElement;
// {Subject of containedSentence may be partition of the RSLActivityNode} 
EdgeClass rsl.rslrequirementrepresentationsentences.svosentences.NodeLinksToPartition from rsl.rslrequirementrepresentationsentences.activityrepresentation.RSLActivityNode (0,1) role node to rsl.rslrequirementrepresentationsentences.svosentences.Subject (0,1) role partition;
CompositionClass rsl.rslrequirementrepresentationsentences.controlsentences.EdgeContainsCondition from rsl.rslrequirementrepresentationsentences.activityrepresentation.RSLActivityEdge (0,1) role edge to rsl.rslrequirementrepresentationsentences.controlsentences.ConditionSentence (0,1) role condition aggregate from;
// {Every sentence belongs to exactly one parent.} 
CompositionClass rsl.rslrequirementrepresentationsentences.controlsentences.InvokeMessageContainsMessageText: rsl.rslkernel.elements.ScenarioMessageLinksToMessageText from rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.InvokeMessage (0,1) to rsl.rslrequirementrepresentationsentences.controlsentences.InvocationSentence (1,1) role messageText aggregate from;
CompositionClass rsl.rslrequirementrepresentationsentences.controlsentences.PostconditionMessageContainsMessageText: rsl.rslkernel.elements.ScenarioMessageLinksToMessageText from rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.PostconditionMessage (0,1) to rsl.rslrequirementrepresentationsentences.controlsentences.PostconditionSentence (1,1) role messageText aggregate from;
CompositionClass rsl.rslrequirementrepresentationsentences.controlsentences.PreconditionMessageContainsMessageText: rsl.rslkernel.elements.ScenarioMessageLinksToMessageText from rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.PreconditionMessage (0,1) to rsl.rslrequirementrepresentationsentences.controlsentences.PreconditionSentence (1,1) role messageText aggregate from;
EdgeClass rsl.rslrequirementrepresentationsentences.activityrepresentation.OutgoingControlFlowLinksToSourceNode from rsl.rslrequirementrepresentationsentences.activityrepresentation.RSLActivityEdge (0,*) role outgoingControlFlow to rsl.rslrequirementrepresentationsentences.activityrepresentation.RSLActivityNode (1,1) role sourceNode;
EdgeClass rsl.rslrequirementrepresentationsentences.activityrepresentation.IncomingControlFlowLinksToTargetNode from rsl.rslrequirementrepresentationsentences.activityrepresentation.RSLActivityEdge (0,*) role incomingControlFlow to rsl.rslrequirementrepresentationsentences.activityrepresentation.RSLActivityNode (1,1) role targetNode;
CompositionClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.ActorContainsLifelineRepresentation from rsl.rsldomainelements.actors.Actor (1,1) to rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.ActorLifeline (0,*) role lifelineRepresentation aggregate from;
CompositionClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.ActorMessageEndIsPartOfCovered from rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.ActorMessageEnd (0,*) role actorMessageEnd to rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.ActorLifeline (1,1) role covered aggregate to;
// {<<invariant>>There must be exactly one sendEvent role and one recieveEvent role connected with a concrete ScenarioMessage}
// {<<invariant>>The must be exactly one sendEvent role and one recieveEvent role connected with a concrete ScenarioMessage}
EdgeClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.PredicateMessageLinksToRecieveEventActor from rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.PredicateMessage (0,1) to rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.ActorMessageEnd (0,1) role recieveEventActor;
EdgeClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.PostconditionMessageLinksToSendEvent from rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.PostconditionMessage (0,1) to rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.ActorMessageEnd (1,1) role sendEvent;
EdgeClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.RejoinMessageLinksToSendEventActor from rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.RejoinMessage (0,*) to rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.ActorMessageEnd (0,1) role sendEventActor;
EdgeClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.RejoinMessageLinksToRecieveEventActor from rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.RejoinMessage (0,*) to rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.ActorMessageEnd (0,1) role recieveEventActor;
// {<<invariant>>There must be exactly one sendEvent role and one recieveEvent role connected with a concrete ScenarioMessage}
// {<<invariant>>The must be exactly one sendEvent role and one recieveEvent role connected with a concrete ScenarioMessage}
EdgeClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.PredicateMessageLinksToSendEventActor from rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.PredicateMessage (0,1) to rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.ActorMessageEnd (0,1) role sendEventActor;
EdgeClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.PreconditionMessageLinksToRecieveEvent from rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.PreconditionMessage (0,1) to rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.ActorMessageEnd (1,1) role recieveEvent;
CompositionClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.InvokeMessageEndIsPartOfCovered from rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.InvokeMessageEnd (1,1) role invokeMessageEnd to rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.InvokeLifeline (1,1) role covered aggregate to;
EdgeClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.InvokeMessageLinksToSendEvent from rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.InvokeMessage (0,1) to rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.SystemElementMessageEnd (1,1) role sendEvent;
EdgeClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.InvokeMessageLinksToReceiveEvent from rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.InvokeMessage (1,1) to rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.InvokeMessageEnd (1,1) role receiveEvent;
CompositionClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.NounPhraseLifelineContainsName from rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.NounPhraseLifeline (1,1) to rsl.rsldomainelements.phrases.NounPhrase (0,1) role name aggregate from;
// {<<invariant>>There must be exactly one sendEvent role and one recieveEvent role connected with a concrete ScenarioMessage}
// {<<invariant>>The must be exactly one sendEvent role and one recieveEvent role connected with a concrete ScenarioMessage}
EdgeClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.PredicateMessageLinksToSendEventSystem from rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.PredicateMessage (0,1) to rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.SystemElementMessageEnd (0,1) role sendEventSystem;
// {<<invariant>>There must be exactly one sendEvent role and one recieveEvent role connected with a concrete ScenarioMessage}
// {<<invariant>>The must be exactly one sendEvent role and one recieveEvent role connected with a concrete ScenarioMessage}
EdgeClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.PredicateMessageLinksToRecieveEventSystem from rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.PredicateMessage (0,1) to rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.SystemElementMessageEnd (0,1) role recieveEventSystem;
EdgeClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.SourceLinksToMessageText: rsl.rslkernel.elements.ScenarioMessageLinksToMessageText from rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.PredicateMessage (0,*) role source to rsl.rsldomainelements.phrases.VerbPhrase (1,1) role messageText;
EdgeClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.RejoinMessageLinksToSendEventSystem from rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.RejoinMessage (0,*) to rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.SystemElementMessageEnd (0,1) role sendEventSystem;
EdgeClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.RejoinMessageLinksToRecieveEventSystem from rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.RejoinMessage (0,*) to rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.SystemElementMessageEnd (0,1) role recieveEventSystem;
CompositionClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.CoveredContainsSystemElementMessageEnd from rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.SystemElementLifeline (1,1) role covered to rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.SystemElementMessageEnd (0,*) role systemElementMessageEnd aggregate from;
CompositionClass rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.SystemElementContainsLifelineRepresentation from rsl.rsldomainelements.systemelements.SystemElement (1,1) to rsl.rslrequirementrepresentationsentences.interactionsentenceconstructs.SystemElementLifeline (0,*) role lifelineRepresentation aggregate from;
// {Every sentence belongs to exactly one parent.} 
// {Every phrase belongs to exactly one parent} 
CompositionClass rsl.rsldomainelements.domainelements.ElementContainsName: rsl.rslkernel.elements.RepresentableElementContainsName from rsl.rsldomainelements.domainelements.ActorOrSystemElement (0,1) role element to rsl.rsldomainelements.phrases.NounPhrase (1,1) role name aggregate from;
CompositionClass rsl.rsldomainelements.domainelements.DomainElementContainsStatement from rsl.rsldomainelements.domainelements.DomainElement (1,1) role domainElement to rsl.rsldomainelements.notions.DomainStatement (0,*) role statement aggregate from;
// {xor} 
CompositionClass rsl.rsldomainelements.domainelements.ElementContainsRepresentation: rsl.rslkernel.elements.ElementContainsRepresentation from rsl.rsldomainelements.domainelements.DomainElement (1,1) role element to rsl.rsldomainelements.domainelementrepresentations.DomainElementRepresentation (1,*) role representation aggregate from;
// {source of DomainElementRelationship should be different than it's target (DomainElement cannot be associated with itself)} 
EdgeClass rsl.rsldomainelements.domainelements.ToTargetLinksToSource: rsl.rslkernel.elements.OutRepresentableElementRelationshipLinksToSource from rsl.rsldomainelements.domainelements.DomainElementRelationship (0,*) role toTarget to rsl.rsldomainelements.domainelements.DomainElement (1,1) role source;
abstract CompositionClass rsl.rsldomainelements.domainelements.PackageContainsDomainElement: rsl.rslkernel.elements.RepresentableElementsPackageContainsElement from rsl.rsldomainelements.domainelements.DomainElementsPackage (1,1) role package to rsl.rsldomainelements.domainelements.DomainElement (0,*) role domainElement aggregate from;
// {source of DomainElementRelationship should be different than it's target (DomainElement cannot be associated with itself)} 
EdgeClass rsl.rsldomainelements.domainelements.ToSourceLinksToTarget: rsl.rslkernel.elements.InRepresentableElementRelationshipLinksToTarget from rsl.rsldomainelements.domainelements.DomainElementRelationship (0,*) role toSource to rsl.rsldomainelements.domainelements.DomainElement (1,1) role target;
// {xor
// } 
abstract CompositionClass rsl.rsldomainelements.domainelements.NestingPackageContainsNestedPackage: rsl.rslkernel.elements.NestingPackageContainsNestedPackage from rsl.rsldomainelements.domainelements.DomainElementsPackage (0,1) role nestingPackage to rsl.rsldomainelements.domainelements.DomainElementsPackage (0,*) role nestedPackage aggregate from;
// {xor
// } 
CompositionClass rsl.rsldomainelements.domainelements.DomainSpecificationContainsDomainElementsPackage: sclkernel.SCLElementsPackageContainsElement from rsl.rsldomainelements.domainelements.DomainSpecification (0,1) role domainSpecification to rsl.rsldomainelements.domainelements.DomainElementsPackage (0,*) role domainElementsPackage aggregate from;
// {xor} 
CompositionClass rsl.rsldomainelements.domainelements.SpecificationContainsSystemUnderDevelopment from rsl.rsldomainelements.domainelements.DomainSpecification (0,1) role specification to rsl.rsldomainelements.systemelements.SystemElement (1,1) role systemUnderDevelopment aggregate from;
// {xor} 
CompositionClass rsl.rsldomainelements.notions.StatementContainsRepresentation: rsl.rslkernel.elements.ElementContainsRepresentation from rsl.rsldomainelements.notions.DomainStatement (0,1) role statement to rsl.rsldomainelements.domainelementrepresentations.DomainElementRepresentation (1,*) role representation aggregate from;
// {Every phrase belongs to exactly one parent} 
CompositionClass rsl.rsldomainelements.notions.StatementContainsName: rsl.rslkernel.elements.RepresentableElementContainsName from rsl.rsldomainelements.notions.DomainStatement (1,1) role statement to rsl.rsldomainelements.phrases.Phrase (0,1) role name aggregate from;
CompositionClass rsl.rsldomainelements.notions.NotionContainsAttribute: rsl.rslkernel.attributes.RepresentableElementContainsAttribute from rsl.rsldomainelements.notions.Notion (0,*) role notion to rsl.rsldomainelements.notions.NotionAttribute (0,*) role attribute aggregate from;
CompositionClass rsl.rsldomainelements.notions.NotionContainsName: rsl.rslkernel.elements.RepresentableElementContainsName from rsl.rsldomainelements.notions.Notion (0,1) role notion to rsl.rsldomainelements.phrases.NounPhrase (1,1) role name aggregate from;
CompositionClass rsl.rsldomainelements.notions.PackageContainsNotion: rsl.rsldomainelements.domainelements.PackageContainsDomainElement from rsl.rsldomainelements.notions.NotionsPackage (0,1) role package to rsl.rsldomainelements.notions.Notion (0,*) role notion aggregate from;
EdgeClass rsl.rsldomainelements.notions.SpecialLinksToTarget: rsl.rslkernel.elements.InRepresentableElementRelationshipLinksToTarget from rsl.rsldomainelements.notions.NotionSpecialisation (0,*) role special to rsl.rsldomainelements.notions.Notion (1,1) role target;
EdgeClass rsl.rsldomainelements.notions.GeneralLinksToSource: rsl.rslkernel.elements.OutRepresentableElementRelationshipLinksToSource from rsl.rsldomainelements.notions.NotionSpecialisation (0,*) role general to rsl.rsldomainelements.notions.Notion (1,1) role source;
// {xor} 
CompositionClass rsl.rsldomainelements.notions.NotionAttributeContainsDescription from rsl.rsldomainelements.notions.NotionAttribute (0,1) role notionAttribute to rsl.rsldomainelements.domainelementrepresentations.DomainElementRepresentation (0,1) role description aggregate from;
CompositionClass rsl.rsldomainelements.notions.NestingPackageContainsNestedPackage: rsl.rsldomainelements.domainelements.NestingPackageContainsNestedPackage from rsl.rsldomainelements.notions.NotionsPackage (0,1) role nestingPackage to rsl.rsldomainelements.notions.NotionsPackage (0,*) role nestedPackage aggregate from;
// {xor} 
CompositionClass rsl.rsldomainelements.systemelements.PackageContainsSystemElement: rsl.rsldomainelements.domainelements.PackageContainsDomainElement from rsl.rsldomainelements.systemelements.SystemElementsPackage (0,1) role package to rsl.rsldomainelements.systemelements.SystemElement (0,*) role systemElement aggregate from;
CompositionClass rsl.rsldomainelements.systemelements.NestingPackageContainsNestedPackage: rsl.rsldomainelements.domainelements.NestingPackageContainsNestedPackage from rsl.rsldomainelements.systemelements.SystemElementsPackage (0,1) role nestingPackage to rsl.rsldomainelements.systemelements.SystemElementsPackage (0,*) role nestedPackage aggregate from;
CompositionClass rsl.rsldomainelements.actors.PackageContainsActor: rsl.rsldomainelements.domainelements.PackageContainsDomainElement from rsl.rsldomainelements.actors.ActorsPackage (1,1) role package to rsl.rsldomainelements.actors.Actor (0,*) role actor aggregate from;
CompositionClass rsl.rsldomainelements.actors.NestingPackageContainsNestedPackage: rsl.rsldomainelements.domainelements.NestingPackageContainsNestedPackage from rsl.rsldomainelements.actors.ActorsPackage (0,1) role nestingPackage to rsl.rsldomainelements.actors.ActorsPackage (0,*) role nestedPackage aggregate from;
EdgeClass rsl.rsldomainelements.uielements.InputOutputDeviceLinksToType from rsl.rsldomainelements.uielements.InputOutputDevice (1,*) to rsl.rsldomainelements.uielements.InputOutputType (0,*) role type;
EdgeClass rsl.rsldomainelements.uielements.UIElementLinksToDevice from rsl.rsldomainelements.uielements.UIElement (1,*) to rsl.rsldomainelements.uielements.InputOutputDevice (0,*) role device;
CompositionClass rsl.rsldomainelements.uielements.SelectionUIElementContainsOption from rsl.rsldomainelements.uielements.SelectionUIElement (0,*) to rsl.rsldomainelements.uielements.OptionUIElement (0,*) role option aggregate from;
EdgeClass rsl.rsldomainelements.uielements.UIElementLinksToSpatialOrder from rsl.rsldomainelements.uielements.UIElement (0,*) to rsl.rsldomainelements.uielements.PresentationOrder (0,*) role spatialOrder;
EdgeClass rsl.rsldomainelements.uielements.UIContainerLinksToOrder from rsl.rsldomainelements.uielements.UIContainer (0,1) to rsl.rsldomainelements.uielements.PresentationOrder (0,*) role order;
EdgeClass rsl.rsldomainelements.uielements.UIElementLinksToTemporalOrder from rsl.rsldomainelements.uielements.UIElement (0,*) to rsl.rsldomainelements.uielements.PresentationOrder (0,*) role temporalOrder;
CompositionClass rsl.rsldomainelements.uielements.UIContainerContainsElement from rsl.rsldomainelements.uielements.UIContainer (1,1) to rsl.rsldomainelements.uielements.UIElement (0,*) role element aggregate from;
CompositionClass rsl.rsldomainelements.uielements.UIElementContainsRepresentation: rsl.rslkernel.elements.ElementContainsRepresentation from rsl.rsldomainelements.uielements.UIElement (1,1) to rsl.rsldomainelements.uielements.UIElementRepresentation (1,*) role representation aggregate from;
// {Every sentence belongs to exactly one parent.} 
CompositionClass rsl.rsldomainelements.phrases.ComplexVerbPhraseContainsSimpleVerbPhrase from rsl.rsldomainelements.phrases.ComplexVerbPhrase (0,1) role complexVerbPhrase to rsl.rsldomainelements.phrases.SimpleVerbPhrase (1,1) role simpleVerbPhrase aggregate from;
CompositionClass rsl.rsldomainelements.phrases.DeterminerIsPartOfSource: rsl.rslkernel.elements.HyperlinkLinksToSource from rsl.rsldomainelements.phrases.DeterminerLink (0,1) role determiner to rsl.rsldomainelements.phrases.NounPhrase (0,1) role source aggregate to;
EdgeClass rsl.rsldomainelements.phrases.DeterminerLinkLinksToTarget: rsl.rsldomainelements.terms.TermHyperlinkLinksToTarget from rsl.rsldomainelements.phrases.DeterminerLink (0,*) role determinerLink to rsl.rsldomainelements.terms.Determiner (1,1) role target;
EdgeClass rsl.rsldomainelements.phrases.ModifierLinkLinksToTarget: rsl.rsldomainelements.terms.TermHyperlinkLinksToTarget from rsl.rsldomainelements.phrases.ModifierLink (0,*) role modifierLink to rsl.rsldomainelements.terms.Modifier (1,1) role target;
CompositionClass rsl.rsldomainelements.phrases.ModifierIsPartOfSource: rsl.rslkernel.elements.HyperlinkLinksToSource from rsl.rsldomainelements.phrases.ModifierLink (0,1) role modifier to rsl.rsldomainelements.phrases.NounPhrase (1,1) role source aggregate to;
CompositionClass rsl.rsldomainelements.phrases.NounIsPartOfSource: rsl.rslkernel.elements.HyperlinkLinksToSource from rsl.rsldomainelements.phrases.NounLink (1,1) role noun to rsl.rsldomainelements.phrases.NounPhrase (0,*) role source aggregate to;
EdgeClass rsl.rsldomainelements.phrases.NounLinkLinksToTarget: rsl.rsldomainelements.terms.TermHyperlinkLinksToTarget from rsl.rsldomainelements.phrases.NounLink (0,*) role nounLink to rsl.rsldomainelements.terms.Noun (1,1) role target;
CompositionClass rsl.rsldomainelements.phrases.VerbPhraseContainsObject from rsl.rsldomainelements.phrases.VerbPhrase (0,1) role verbPhrase to rsl.rsldomainelements.phrases.NounPhrase (0,1) role object aggregate from;
abstract EdgeClass rsl.rsldomainelements.phrases.PhraseHyperlinkLinksToTarget: rsl.rslkernel.elements.HyperlinkLinksToTarget from rsl.rsldomainelements.phrases.PhraseHyperlink (0,*) to rsl.rsldomainelements.phrases.Phrase (0,1) role target;
EdgeClass rsl.rsldomainelements.phrases.PrepositionLinkLinksToTarget: rsl.rsldomainelements.terms.TermHyperlinkLinksToTarget from rsl.rsldomainelements.phrases.PhrasePrepositionLink (0,*) role prepositionLink to rsl.rsldomainelements.terms.Preposition (1,1) role target;
CompositionClass rsl.rsldomainelements.phrases.PrepositionIsPartOfSource: rsl.rslkernel.elements.HyperlinkLinksToSource from rsl.rsldomainelements.phrases.PhrasePrepositionLink (0,1) role preposition to rsl.rsldomainelements.phrases.VerbPhrase (1,1) role source aggregate to;
CompositionClass rsl.rsldomainelements.phrases.VerbIsPartOfSource: rsl.rslkernel.elements.HyperlinkLinksToSource from rsl.rsldomainelements.phrases.PhraseVerbLink (1,1) role verb to rsl.rsldomainelements.phrases.SimpleVerbPhrase (1,1) role source aggregate to;
EdgeClass rsl.rsldomainelements.phrases.VerbLinkLinksToTarget: rsl.rsldomainelements.terms.TermHyperlinkLinksToTarget from rsl.rsldomainelements.phrases.PhraseVerbLink (0,*) role verbLink to rsl.rsldomainelements.terms.Verb (1,1) role target;
CompositionClass rsl.rsldomainelements.terms.LemmaIsPartOfLexeme from rsl.rsldomainelements.terms.Lemma (1,1) role lemma to rsl.rsldomainelements.terms.Lexeme (1,1) aggregate to;
CompositionClass rsl.rsldomainelements.terms.LexemeIsPartOfTerm from rsl.rsldomainelements.terms.Lexeme (1,*) role lexeme to rsl.rsldomainelements.terms.Term (1,1) aggregate to;
abstract EdgeClass rsl.rsldomainelements.terms.TermHyperlinkLinksToTarget: rsl.rslkernel.elements.HyperlinkLinksToTarget from rsl.rsldomainelements.terms.TermHyperlink (0,*) to rsl.rsldomainelements.terms.Term (0,1) role target;
CompositionClass rsl.rsldomainelements.terms.TerminologyContainsTerm: sclkernel.SCLElementsPackageContainsElement from rsl.rsldomainelements.terms.Terminology (1,1) role terminology to rsl.rsldomainelements.terms.Term (0,*) role term aggregate from;
CompositionClass sclkernel.ContainedClipboardIsPartOfParentSoftwareCase from sclkernel.Clipboard (0,*) role containedClipboard to sclkernel.SoftwareCase (1,1) role parentSoftwareCase aggregate to;
EdgeClass sclkernel.ClipboardMemberLinksToParentClipboard from sclkernel.SCLElement (0,*) role clipboardMember to sclkernel.Clipboard (0,*) role parentClipboard;
EdgeClass sclkernel.ImplementsLinksToImplementationTarget: sclkernel.SCLRelationshipLinksToTarget from sclkernel.Implements (0,*) to sclkernel.SCLElement (1,1) role implementationTarget;
// {source must be from package 'Java'} 
EdgeClass sclkernel.ImplementsLinksToImplementationSource: sclkernel.SCLRelationshipLinksToSource from sclkernel.Implements (0,*) to sclkernel.SCLElement (1,1) role implementationSource;
// {source must be from package 'RSL'} 
EdgeClass sclkernel.AllocationToUMLLinksToAllocationSource: sclkernel.SCLRelationshipLinksToSource from sclkernel.IsAllocatedTo (0,*) role allocationToUML to sclkernel.SCLElement (1,1) role allocationSource;
EdgeClass sclkernel.AllocationToRSLLinksToAllocationTarget: sclkernel.SCLRelationshipLinksToTarget from sclkernel.IsAllocatedTo (0,*) role allocationToRSL to uml.classes.kernel.NamedElement (1,1) role allocationTarget;
EdgeClass sclkernel.SupplierDependentOnLinksToDependencyTarget: sclkernel.SCLRelationshipLinksToTarget from sclkernel.IsDependentOn (0,*) role supplierDependentOn to uml.classes.kernel.NamedElement (1,1) role dependencyTarget;
EdgeClass sclkernel.ClientDependentOnLinksToDependencySource: sclkernel.SCLRelationshipLinksToSource from sclkernel.IsDependentOn (0,*) role clientDependentOn to uml.classes.kernel.NamedElement (1,1) role dependencySource;
EdgeClass sclkernel.EaObjectLinksToSclElement from ea.EAObject (0,*) role eaObject to sclkernel.SCLElement (0,*) role sclElement;
// {target must be from package 'RSL'} 
EdgeClass sclkernel.SatisfiesLinksToSatisfactionTarget: sclkernel.SCLRelationshipLinksToTarget from sclkernel.Satisfies (0,*) to sclkernel.SCLElement (1,1) role satisfactionTarget;
abstract CompositionClass sclkernel.SCLElementsPackageContainsElement from sclkernel.SCLElementsPackage (0,*) to sclkernel.SCLElement (0,*) role element aggregate from;
abstract EdgeClass sclkernel.SCLRelationshipLinksToSource from sclkernel.SCLRelationship (0,*) to sclkernel.SCLElement (1,1) role source;
abstract EdgeClass sclkernel.SCLRelationshipLinksToTarget from sclkernel.SCLRelationship (0,*) to sclkernel.SCLElement (1,1) role target;
abstract CompositionClass sclkernel.SCLElementsPackageContainsNestedPackage: sclkernel.SCLElementsPackageContainsElement from sclkernel.SCLElementsPackage (0,1) to sclkernel.SCLElementsPackage (0,*) role nestedPackage aggregate from;
CompositionClass sclkernel.SCLElementsPackageContainsRelation from sclkernel.SCLElementsPackage (0,*) to sclkernel.SCLRelationship (0,*) role relation aggregate from;
EdgeClass sclkernel.SatisfiesLinksToSatisfactionSource: sclkernel.SCLRelationshipLinksToSource from sclkernel.Satisfies (0,*) to uml.classes.kernel.NamedElement (1,1) role satisfactionSource;
CompositionClass sclkernel.ArtifactContainsOwnedTrace from sclkernel.SoftwareArtifact (1,1) role artifact to sclkernel.TraceabilityLink (0,*) role ownedTrace aggregate from;
CompositionClass sclkernel.ArtifactContainsUmlModel from sclkernel.SoftwareArtifact (0,1) role artifact to uml.auxiliaryconstructs.models.Model (0,*) role umlModel aggregate from;
CompositionClass sclkernel.SoftwareCaseContainsArtifact: sclkernel.SCLElementsPackageContainsElement from sclkernel.SoftwareCase (0,1) to sclkernel.SoftwareArtifact (0,*) role artifact aggregate from;
CompositionClass sclkernel.SoftwareCaseContainsTrace from sclkernel.SoftwareCase (1,1) to sclkernel.TraceabilityLink (0,*) role trace aggregate from;
CompositionClass ea.AttributesIsPartOfElement from ea.Attribute (0,*) role attributes to ea.Element (1,1) role element aggregate to;
EdgeClass ea.ClassifierLinksToClassifiedObject from ea.Element (0,1) role classifier to ea.ClassifiedObject (0,*) role classifiedObject;
CompositionClass ea.Conn_suContainsSupplierEnd from ea.Connector (0,1) role conn_su to ea.ConnectorEnd (1,1) role supplierEnd aggregate from;
CompositionClass ea.ConnectorsIsPartOfPackage from ea.Connector (0,*) role connectors to ea.Package (0,1) role package aggregate to;
EdgeClass ea.ClientLinksToConn_cl from ea.Element (1,1) role client to ea.Connector (0,*) role conn_cl;
CompositionClass ea.ClientEndIsPartOfConn_cl from ea.ConnectorEnd (1,1) role clientEnd to ea.Connector (0,1) role conn_cl aggregate to;
EdgeClass ea.SupplierLinksToConn_su from ea.Element (1,1) role supplier to ea.Connector (0,*) role conn_su;
CompositionClass ea.ParentContainsElements from ea.Element (0,1) role parent to ea.Element (0,*) role elements aggregate from;
CompositionClass ea.ElementsIsPartOfPackage from ea.Element (0,*) role elements to ea.Package (0,1) role package aggregate to;
CompositionClass ea.MethodsIsPartOfElement from ea.Method (0,*) role methods to ea.Element (1,1) role element aggregate to;
CompositionClass ea.ParametersIsPartOfMethod from ea.Parameter (0,*) role parameters to ea.Method (1,1) role method aggregate to;
CompositionClass ea.PackagesIsPartOfParent from ea.Package (0,*) role packages to ea.Package (0,1) role parent aggregate to;
CompositionClass ea.TaggedValuesIsPartOfObject from ea.TaggedValue (0,*) role taggedValues to ea.TaggedObject (1,1) role object aggregate to;
EdgeClass ea.ReferenceLinksToReferencedObj from ea.TaggedValue (0,*) role reference to ea.TaggedObject (0,1) role referencedObj;
EdgeClass uml.action.basicactions.BehaviorLinksToCallAction from uml.commonbehaviors.basicbehaviors.Behavior (1,1) role behavior to uml.action.basicactions.CallBehaviorAction (0,*) role callAction;
CompositionClass uml.activities.basicactivities.ActivityContainsNode from uml.activities.basicactivities.Activity (0,1) role activity to uml.activities.basicactivities.ActivityNode (0,*) role node aggregate from;
CompositionClass uml.activities.basicactivities.EdgeIsPartOfActivity from uml.activities.basicactivities.ActivityEdge (0,*) role edge to uml.activities.basicactivities.Activity (0,1) role activity aggregate to;
CompositionClass uml.activities.basicactivities.GroupIsPartOfInActivity from uml.activities.basicactivities.ActivityGroup (0,*) role group to uml.activities.basicactivities.Activity (0,1) role inActivity aggregate to;
CompositionClass uml.activities.basicactivities.ActivityEdgeContainsGuard from uml.activities.basicactivities.ActivityEdge (0,1) role activityEdge to uml.classes.kernel.ValueSpecification (1,1) role guard aggregate from;
EdgeClass uml.activities.basicactivities.EdgeLinksToInPartition from uml.activities.basicactivities.ActivityEdge (0,*) role edge to uml.activities.intermediateactivities.ActivityPartition (0,*) role inPartition;
EdgeClass uml.activities.basicactivities.TargetLinksToIncoming from uml.activities.basicactivities.ActivityNode (1,1) role target to uml.activities.basicactivities.ActivityEdge (0,*) role incoming;
EdgeClass uml.activities.basicactivities.SourceLinksToOutgoing from uml.activities.basicactivities.ActivityNode (1,1) role source to uml.activities.basicactivities.ActivityEdge (0,*) role outgoing;
EdgeClass uml.activities.basicactivities.InPartitionLinksToNode from uml.activities.intermediateactivities.ActivityPartition (0,*) role inPartition to uml.activities.basicactivities.ActivityNode (0,*) role node;
CompositionClass uml.activities.intermediateactivities.SubpartitionIsPartOfSuperPartition from uml.activities.intermediateactivities.ActivityPartition (0,*) role subpartition to uml.activities.intermediateactivities.ActivityPartition (0,1) role superPartition aggregate to;
EdgeClass uml.activities.intermediateactivities.RepresentedByLinksToRepresents from uml.activities.intermediateactivities.ActivityPartition (0,*) role representedBy to uml.classes.kernel.Element (0,1) role represents;
EdgeClass uml.classes.dependencies.ClientDependencyLinksToClient from uml.classes.dependencies.Dependency (0,*) role clientDependency to uml.classes.kernel.NamedElement (1,*) role client;
EdgeClass uml.classes.dependencies.SupplierDependencyLinksToSupplier from uml.classes.dependencies.Dependency (0,*) role supplierDependency to uml.classes.kernel.NamedElement (1,*) role supplier;
CompositionClass uml.classes.interfaces.OwningInterfaceContainsOwnedAttribute from uml.classes.interfaces.Interface (0,1) role owningInterface to uml.classes.kernel.Property (0,*) role ownedAttribute aggregate from;
EdgeClass uml.classes.interfaces.ContractLinksToInterfaceRealization from uml.classes.interfaces.Interface (1,1) role contract to uml.classes.interfaces.InterfaceRealization (0,*) role interfaceRealization;
EdgeClass uml.classes.interfaces.BaseInterfaceLinksToRedefinedInterface from uml.classes.interfaces.Interface (0,*) role baseInterface to uml.classes.interfaces.Interface (0,*) role redefinedInterface;
CompositionClass uml.classes.interfaces.OwnedOperationIsPartOfInterface from uml.classes.kernel.Operation (0,*) role ownedOperation to uml.classes.interfaces.Interface (0,1) role interface aggregate to;
CompositionClass uml.classes.interfaces.InterfaceRealizationIsPartOfImplementingClassifier from uml.classes.interfaces.InterfaceRealization (0,*) role interfaceRealization to uml.commonbehaviors.basicbehaviors.BehavioredClassifier (1,1) role implementingClassifier aggregate to;
CompositionClass uml.classes.kernel.OwnedEndIsPartOfOwningAssociation from uml.classes.kernel.Property (0,*) role ownedEnd to uml.classes.kernel.Association (0,1) role owningAssociation aggregate to;
EdgeClass uml.classes.kernel.MemberEndLinksToAssociation from uml.classes.kernel.Property (2,*) role memberEnd to uml.classes.kernel.Association (0,1) role association;
CompositionClass uml.classes.kernel.OwnedOperationIsPartOfClass from uml.classes.kernel.Operation (0,*) role ownedOperation to uml.classes.kernel.Class (0,1) role class aggregate to;
EdgeClass uml.classes.kernel.BaseClassifierLinksToRedefinedClassifier from uml.classes.kernel.Classifier (0,*) role baseClassifier to uml.classes.kernel.Classifier (0,*) role redefinedClassifier;
EdgeClass uml.classes.kernel.GeneralLinksToSpecialization from uml.classes.kernel.Classifier (1,1) role general to uml.classes.kernel.Generalization (0,*) role specialization;
CompositionClass uml.classes.kernel.OwnedUseCaseIsPartOfOwningClassifier from uml.usecases.UseCase (0,*) role ownedUseCase to uml.classes.kernel.Classifier (0,1) role owningClassifier aggregate to;
CompositionClass uml.classes.kernel.GeneralizationIsPartOfSpecific from uml.classes.kernel.Generalization (0,*) role generalization to uml.classes.kernel.Classifier (1,1) role specific aggregate to;
EdgeClass uml.classes.kernel.ComponentRealizationLinksToRealizingClassifier from uml.components.basiccomponents.ComponentRealization (0,*) role componentRealization to uml.classes.kernel.Classifier (1,1) role realizingClassifier;
EdgeClass uml.classes.kernel.UseCaseLinksToSubject from uml.usecases.UseCase (0,*) role useCase to uml.classes.kernel.Classifier (0,*) role subject;
CompositionClass uml.classes.kernel.OwnedCommentIsPartOfOwningElement from uml.classes.kernel.Comment (0,*) role ownedComment to uml.classes.kernel.Element (0,1) role owningElement aggregate to;
EdgeClass uml.classes.kernel.AnnotationLinksToAnnotatedElement from uml.classes.kernel.Comment (0,*) role annotation to uml.classes.kernel.Element (0,*) role annotatedElement;
CompositionClass uml.classes.kernel.OwningConstraintContainsSpecification from uml.classes.kernel.Constraint (0,1) role owningConstraint to uml.classes.kernel.ValueSpecification (1,1) role specification aggregate from;
CompositionClass uml.classes.kernel.OwnedAttributeIsPartOfDataType from uml.classes.kernel.Property (0,*) role ownedAttribute to uml.classes.kernel.DataType (0,1) role dataType aggregate to;
CompositionClass uml.classes.kernel.OwnedOperationIsPartOfDataType from uml.classes.kernel.Operation (0,*) role ownedOperation to uml.classes.kernel.DataType (0,1) role dataType aggregate to;
EdgeClass uml.classes.kernel.ElementLinksToStereotype from uml.classes.kernel.Element (0,*) role element to uml.classes.kernel.Stereotype (0,*) role stereotype;
EdgeClass uml.classes.kernel.ImportLinksToImportedElement from uml.classes.kernel.ElementImport (1,1) role import to uml.classes.kernel.PackagableElement (1,1) role importedElement;
EdgeClass uml.classes.kernel.ElementImportLinksToImportingNamespace from uml.classes.kernel.ElementImport (0,*) role elementImport to uml.classes.kernel.Namespace (1,1) role importingNamespace;
CompositionClass uml.classes.kernel.OwnedLiteralIsPartOfEnumeration from uml.classes.kernel.EnumerationLiteral (0,*) role ownedLiteral to uml.classes.kernel.Enumeration (0,1) role enumeration aggregate to;
EdgeClass uml.classes.kernel.ExpressionLinksToOperand from uml.classes.kernel.Expression (0,*) role expression to uml.classes.kernel.ValueSpecification (0,*) role operand;
CompositionClass uml.classes.kernel.SpecificationIsPartOfOwningInstanceSpec from uml.classes.kernel.ValueSpecification (0,1) role specification to uml.classes.kernel.InstanceSpecification (0,1) role owningInstanceSpec aggregate to;
EdgeClass uml.classes.kernel.ValueLinksToInstance from uml.classes.kernel.InstanceValue (0,*) role value to uml.classes.kernel.InstanceSpecification (1,1) role instance;
CompositionClass uml.classes.kernel.LowerValueIsPartOfOwningLower from uml.classes.kernel.ValueSpecification (0,1) role lowerValue to uml.classes.kernel.MultiplicityElement (0,1) role owningLower aggregate to;
CompositionClass uml.classes.kernel.UpperValueIsPartOfOwningUpper from uml.classes.kernel.ValueSpecification (0,1) role upperValue to uml.classes.kernel.MultiplicityElement (0,1) role owningUpper aggregate to;
EdgeClass uml.classes.kernel.PackageImportLinksToImportingNamespace from uml.classes.kernel.PackageImport (0,*) role packageImport to uml.classes.kernel.Namespace (1,1) role importingNamespace;
EdgeClass uml.classes.kernel.BaseOperationLinksToRedefinedOperation from uml.classes.kernel.Operation (0,*) role baseOperation to uml.classes.kernel.Operation (0,*) role redefinedOperation;
EdgeClass uml.classes.kernel.RaisedExceptionLinksToOperation from uml.classes.kernel.Type (0,*) role raisedException to uml.classes.kernel.Operation (0,*) role operation;
EdgeClass uml.classes.kernel.ReceiveOperationEventLinksToOperation from uml.interactions.basicinteractions.ReceiveOperationEvent (0,*) role receiveOperationEvent to uml.classes.kernel.Operation (1,1) role operation;
CompositionClass uml.classes.kernel.OwnedParameterIsPartOfOperation from uml.classes.kernel.Parameter (0,*) role ownedParameter to uml.classes.kernel.Operation (0,1) role operation aggregate to;
EdgeClass uml.classes.kernel.SendOperationEventLinksToOperation from uml.interactions.basicinteractions.SendOperationEvent (0,*) role sendOperationEvent to uml.classes.kernel.Operation (1,1) role operation;
CompositionClass uml.classes.kernel.PackagedElementIsPartOfOwningPackage from uml.classes.kernel.PackagableElement (0,*) role packagedElement to uml.classes.kernel.Package (0,1) role owningPackage aggregate to;
EdgeClass uml.classes.kernel.ImportingLinksToImportedPackage from uml.classes.kernel.PackageImport (0,*) role importing to uml.classes.kernel.Package (1,1) role importedPackage;
CompositionClass uml.classes.kernel.DefaultValueIsPartOfOwningParameter from uml.classes.kernel.ValueSpecification (0,1) role defaultValue to uml.classes.kernel.Parameter (0,1) role owningParameter aggregate to;
EdgeClass uml.classes.kernel.BasePropertyLinksToRedefinedProperty from uml.classes.kernel.Property (0,*) role baseProperty to uml.classes.kernel.Property (0,*) role redefinedProperty;
EdgeClass uml.classes.kernel.OwningPropertyLinksToDefaultValue from uml.classes.kernel.Property (0,1) role owningProperty to uml.classes.kernel.ValueSpecification (0,1) role defaultValue;
EdgeClass uml.classes.kernel.SuperPropertyLinksToSubsettedProperty from uml.classes.kernel.Property (0,*) role superProperty to uml.classes.kernel.Property (0,*) role subsettedProperty;
CompositionClass uml.classes.kernel.ClassContainsOwnedAttribute from uml.compositestructures.internalstructures.StructuredClassifier (0,1) role class to uml.classes.kernel.Property (0,*) role ownedAttribute aggregate from;
EdgeClass uml.classes.kernel.TypeLinksToTyped from uml.classes.kernel.Type (0,1) role type to uml.classes.kernel.TypedElement (0,*) role typed;
CompositionClass uml.classes.kernel.MinintIsPartOfMinInteractionConstraint from uml.classes.kernel.ValueSpecification (0,1) role minint to uml.interactions.fragments.InteractionConstraint (0,1) role minInteractionConstraint aggregate to;
CompositionClass uml.classes.kernel.MaxintIsPartOfMaxInteractionConstraint from uml.classes.kernel.ValueSpecification (0,1) role maxint to uml.interactions.fragments.InteractionConstraint (0,1) role maxInteractionConstraint aggregate to;
CompositionClass uml.classes.kernel.SelectorIsPartOfLifeline from uml.classes.kernel.ValueSpecification (0,1) role selector to uml.interactions.basicinteractions.Lifeline (0,1) role lifeline aggregate to;
CompositionClass uml.classes.kernel.OwnerContainsArgument from uml.interactions.basicinteractions.Message (0,1) role owner to uml.classes.kernel.ValueSpecification (0,*) role argument aggregate from;
EdgeClass uml.classes.kernel.MessageLinksToGuard from uml.interactions.basicinteractions.Message (0,1) role message to uml.classes.kernel.ValueSpecification (0,1) role guard;
EdgeClass uml.commonbehaviors.basicbehaviors.BehaviorExecutionLinksToBehavior from uml.interactions.basicinteractions.BehaviorExecutionSpecification (0,*) role behaviorExecution to uml.commonbehaviors.basicbehaviors.Behavior (0,1) role behavior;
CompositionClass uml.commonbehaviors.basicbehaviors.OwningClassifierContainsOwnedBehavior from uml.commonbehaviors.basicbehaviors.BehavioredClassifier (0,1) role owningClassifier to uml.commonbehaviors.basicbehaviors.Behavior (0,*) role ownedBehavior aggregate from;
EdgeClass uml.commonbehaviors.basicbehaviors.BehavioredClassifierLinksToClassifierBehavior from uml.commonbehaviors.basicbehaviors.BehavioredClassifier (0,1) role behavioredClassifier to uml.commonbehaviors.basicbehaviors.Behavior (0,1) role classifierBehavior;
EdgeClass uml.commonbehaviors.communications.OccuranceSpecificationLinksToEvent from uml.interactions.basicinteractions.OccurrenceSpecification (0,*) role occuranceSpecification to uml.commonbehaviors.communications.Event (1,1) role event;
CompositionClass uml.components.basiccomponents.RealizationIsPartOfAbstraction from uml.components.basiccomponents.ComponentRealization (0,*) role realization to uml.components.basiccomponents.Component (0,1) role abstraction aggregate to;
EdgeClass uml.compositestructures.collaborations.CollaborationLinksToCollaborationRole from uml.compositestructures.collaborations.Collaboration (0,*) role collaboration to uml.compositestructures.internalstructures.ConnectableElement (0,*) role collaborationRole;
EdgeClass uml.compositestructures.internalstructures.EndLinksToRole from uml.compositestructures.internalstructures.ConnectorEnd (0,*) role end to uml.compositestructures.internalstructures.ConnectableElement (1,1) role 'role;
EdgeClass uml.compositestructures.internalstructures.LifelineLinksToRepresents from uml.interactions.basicinteractions.Lifeline (0,*) role lifeline to uml.compositestructures.internalstructures.ConnectableElement (0,1) role represents;
CompositionClass uml.compositestructures.internalstructures.OwnedConnectorIsPartOfStructuredClassifier from uml.compositestructures.internalstructures.Connector (0,*) role ownedConnector to uml.compositestructures.internalstructures.StructuredClassifier (0,1) role structuredClassifier aggregate to;
CompositionClass uml.compositestructures.internalstructures.EndIsPartOfConnector from uml.compositestructures.internalstructures.ConnectorEnd (2,*) role end to uml.compositestructures.internalstructures.Connector (1,1) role connector aggregate to;
EdgeClass uml.compositestructures.internalstructures.MessageLinksToConnector from uml.interactions.basicinteractions.Message (0,*) role message to uml.compositestructures.internalstructures.Connector (0,1) role connector;
EdgeClass uml.interactions.basicinteractions.StartedExecutionLinksToStart from uml.interactions.basicinteractions.ExecutionSpecification (0,*) role startedExecution to uml.interactions.basicinteractions.OccurrenceSpecification (1,1) role start;
EdgeClass uml.interactions.basicinteractions.EndedExecutionLinksToFinish from uml.interactions.basicinteractions.ExecutionSpecification (0,*) role endedExecution to uml.interactions.basicinteractions.OccurrenceSpecification (1,1) role finish;
CompositionClass uml.interactions.basicinteractions.EnclosingInteractionContainsFragment from uml.interactions.basicinteractions.Interaction (0,1) role enclosingInteraction to uml.interactions.basicinteractions.InteractionFragment (0,*) role fragment aggregate from;
CompositionClass uml.interactions.basicinteractions.LifelineIsPartOfInteraction from uml.interactions.basicinteractions.Lifeline (0,*) role lifeline to uml.interactions.basicinteractions.Interaction (1,1) role interaction aggregate to;
CompositionClass uml.interactions.basicinteractions.MessageIsPartOfInteraction from uml.interactions.basicinteractions.Message (0,*) role message to uml.interactions.basicinteractions.Interaction (1,1) role interaction aggregate to;
EdgeClass uml.interactions.basicinteractions.CoveredLinksToCoveredBy from uml.interactions.basicinteractions.Lifeline (0,*) role covered to uml.interactions.basicinteractions.InteractionFragment (0,*) role coveredBy;
CompositionClass uml.interactions.basicinteractions.EnclosingOperandContainsFragment from uml.interactions.fragments.InteractionOperand (0,1) role enclosingOperand to uml.interactions.basicinteractions.InteractionFragment (0,*) role fragment aggregate from;
EdgeClass uml.interactions.basicinteractions.ReceiveMessageLinksToReceiveEvent from uml.interactions.basicinteractions.Message (0,1) role receiveMessage to uml.interactions.basicinteractions.MessageEnd (0,1) role receiveEvent;
EdgeClass uml.interactions.basicinteractions.SendMessageLinksToSendEvent from uml.interactions.basicinteractions.Message (0,1) role sendMessage to uml.interactions.basicinteractions.MessageEnd (0,1) role sendEvent;
EdgeClass uml.interactions.basicinteractions.MessageEndLinksToMessage from uml.interactions.basicinteractions.MessageEnd (0,1) role messageEnd to uml.interactions.basicinteractions.Message (0,1) role message;
CompositionClass uml.interactions.fragments.CombinedFragmentContainsOperand from uml.interactions.fragments.CombinedFragment (0,1) role combinedFragment to uml.interactions.fragments.InteractionOperand (1,*) role operand aggregate from;
CompositionClass uml.interactions.fragments.InteractionOperandContainsGuard from uml.interactions.fragments.InteractionOperand (1,1) role interactionOperand to uml.interactions.fragments.InteractionConstraint (0,1) role guard aggregate from;
EdgeClass uml.usecases.ExtensionLinksToExtensionLocation from uml.usecases.Extend (0,*) role extension to uml.usecases.ExtensionPoint (1,*) role extensionLocation;
CompositionClass uml.usecases.ExtendIsPartOfExtension from uml.usecases.Extend (0,*) role extend to uml.usecases.UseCase (1,1) role extension aggregate to;
EdgeClass uml.usecases.ExtenderLinksToExtendedCase from uml.usecases.Extend (0,*) role extender to uml.usecases.UseCase (1,1) role extendedCase;
CompositionClass uml.usecases.ExtensionPointIsPartOfUseCase from uml.usecases.ExtensionPoint (0,*) role extensionPoint to uml.usecases.UseCase (1,1) role useCase aggregate to;
CompositionClass uml.usecases.IncludeIsPartOfIncludingCase from uml.usecases.Include (0,*) role include to uml.usecases.UseCase (1,1) role includingCase aggregate to;
EdgeClass uml.usecases.IncluderLinksToAddition from uml.usecases.Include (0,*) role includer to uml.usecases.UseCase (1,1) role addition;
//
// --------------Reduced WordNetSchema (contains only Synsets, RelateableDictionaryElement, DictionaryElement)
Package dictionaryelements;
//EnumDomain AdjectivePosition ( ATTRIBUTIVE, IMMEDIATE_POSTNOMINAL, NONE, PREDICATIVE );
//VertexClass AdjectiveForm: WordForm;
//VertexClass AdjectiveSynonym: Synonym { position: AdjectivePosition };
VertexClass AdjectiveSynset: Synset { satellite: Boolean };
//VertexClass AdverbForm: WordForm;
//VertexClass AdverbSynonym: Synonym;
VertexClass AdverbSynset: Synset;
//VertexClass ComplexVerbSentenceFrame: VerbSentenceFrame;
//VertexClass ConditionalConjunctionForm: WordForm;
//VertexClass ConditionalConjunctionSynonym: Synonym;
VertexClass ConditionalConjunctionSynset: Synset;
//VertexClass DeterminerForm: WordForm;
//VertexClass DeterminerSynonym: Synonym;
VertexClass DeterminerSynset: Synset;
abstract VertexClass DictionaryElement { uid: Long };
//VertexClass NounForm: WordForm;
//VertexClass NounSynonym: Synonym;
VertexClass NounSynset: Synset;
//VertexClass PrepositionForm: WordForm;
//VertexClass PrepositionSynonym: Synonym;
VertexClass PrepositionSynset: Synset;
abstract VertexClass RelateableDictionaryElement: DictionaryElement;
//VertexClass SimpleVerbSentenceFrame: VerbSentenceFrame;
//abstract VertexClass Synonym: RelateableDictionaryElement { spelling: String,  tagCount: Integer };
abstract VertexClass Synset: RelateableDictionaryElement { gloss: String };
//VertexClass VerbForm: WordForm;
//VertexClass VerbSentenceFrame: DictionaryElement { frame: String,  index: Integer };
//VertexClass VerbSynonym: Synonym;
VertexClass VerbSynset: Synset;
//abstract VertexClass WordForm: DictionaryElement { exceptions: List<String>,  lemma: String };
//AggregationClass ContainsAdjectiveSynonym: ContainsSynonym from AdjectiveSynset (1,1) role adjectiveSynset to AdjectiveSynonym (1,*) role adjectiveSynonym aggregate from;
//AggregationClass ContainsAdverbSynonym: ContainsSynonym from AdverbSynset (1,1) role adverbSynset to AdverbSynonym (1,*) role adverbSynonym aggregate from;
//AggregationClass ContainsConditionalConjunctionSynonym: ContainsSynonym from ConditionalConjunctionSynset (1,1) role conditionalConjunctionSynset to ConditionalConjunctionSynonym (1,1) role conditionalConjunctionSynonym aggregate from;
//AggregationClass ContainsDeterminerSynonym: ContainsSynonym from DeterminerSynset (1,1) role determinerSynset to DeterminerSynonym (1,1) role determinerSynonym aggregate from;
//AggregationClass ContainsNounSynonym: ContainsSynonym from NounSynset (1,1) role nounSynset to NounSynonym (1,*) role nounSynonym aggregate from;
//AggregationClass ContainsPrepositionSynonym: ContainsSynonym from PrepositionSynset (1,1) role prepositionSynset to PrepositionSynonym (1,1) role perpositionSynonym aggregate from;
//AggregationClass ContainsSynonym from Synset (1,1) role synset to Synonym (1,*) role synonym aggregate from;
//AggregationClass ContainsVerbSynonym: ContainsSynonym from VerbSynset (1,1) role verbSynset to VerbSynonym (1,*) role verbSynonym aggregate from;
//EdgeClass HasAdjectiveSynonym: HasSynonym from AdjectiveForm (1,1) role adjectiveForm to AdjectiveSynonym (1,*) role adjectiveSynonym;////
//EdgeClass HasAdverbSynonym: HasSynonym from AdverbForm (1,1) role adverbForm to AdverbSynonym (1,*) role adverbSynonym;
//EdgeClass HasConditionalConjunctionSynonym: HasSynonym from ConditionalConjunctionForm (1,1) role conditionalConjunctionForm to ConditionalConjunctionSynonym (1,*) role conditionalConjunctionSynonym;
//EdgeClass HasDeterminerSynonym: HasSynonym from DeterminerForm (1,1) role determinerForm to DeterminerSynonym (1,*) role determinerSynonym;
//EdgeClass HasHomograph from WordForm (0,1) role referringHomograph to WordForm (0,1) role referredHomograph;
//EdgeClass HasNounSynonym: HasSynonym from NounForm (1,1) role nounForm to NounSynonym (1,*) role nounSynonym;
//EdgeClass HasPrepositionSynonym: HasSynonym from PrepositionForm (1,1) role prepositionForm to PrepositionSynonym (1,*) role prepositionSynonym;
//EdgeClass HasSynonym from WordForm (1,1) role wordForm to Synonym (1,*) role synonym;
//EdgeClass HasVerbSynonym: HasSynonym from VerbForm (1,1) role verbForm to VerbSynonym (1,*) role verbSynonym;
//EdgeClass SynonymLinksToVerbFrame from VerbSynonym (0,*) role linkingSynonym to VerbSentenceFrame (0,*) role linkedVerbFrame;
//EdgeClass SynsetLinksToVerbFrame from VerbSynset (0,*) role linkingSynset to VerbSentenceFrame (0,*) role linkedVerbFrame;
//Package relationships;
//EdgeClass AlsoSeeLexical: HasLexicalRelationship from dictionaryelements.VerbSynonym (0,*) role referrer to dictionaryelements.VerbSynonym (0,*) role reference;
//EdgeClass AlsoSeeSemantic: HasSemanticRelationship from dictionaryelements.Synset (0,*) role referrer to dictionaryelements.Synset (0,*) role reference;
//EdgeClass Causes: HasSemanticRelationship from dictionaryelements.VerbSynset (0,*) role cause to dictionaryelements.VerbSynset (0,*) role effect;
//EdgeClass ConstitutesVerbGroupLexical: HasLexicalRelationship from dictionaryelements.VerbSynonym (0,*) role source to dictionaryelements.VerbSynonym (0,*) role target;
//EdgeClass ConstitutesVerbGroupSemantic: HasSemanticRelationship from dictionaryelements.VerbSynset (0,*) role source to dictionaryelements.VerbSynset (0,*) role target;
//EdgeClass DerivesFrom: HasLexicalRelationship from dictionaryelements.Synonym (0,*) role derivedWordSense to dictionaryelements.AdjectiveSynonym (0,*) role derivingAdjective;
//EdgeClass Entails: HasSemanticRelationship from dictionaryelements.VerbSynset (0,*) role entailingVerb to dictionaryelements.VerbSynset (0,*) role entailedVerb;
//EdgeClass HasAntonym: HasLexicalRelationship from dictionaryelements.Synonym (0,*) role sourceAntonym to dictionaryelements.Synonym (0,*) role targetAntonym;
//EdgeClass HasAttribute: HasSemanticRelationship from dictionaryelements.NounSynset (0,*) role testAttribute to dictionaryelements.AdjectiveSynset (0,*) role testValue;
//EdgeClass HasDerivationallyRelatedForm: HasLexicalRelationship from dictionaryelements.Synonym (0,*) role baseForm to dictionaryelements.Synonym (0,*) role derivation;
//EdgeClass HasHolonym: HasSemanticRelationship from dictionaryelements.NounSynset (0,*) role testMeronym to dictionaryelements.NounSynset (0,*) role testHolonym;
//EdgeClass HasHypernym: HasSemanticRelationship from dictionaryelements.Synset (0,*) role testHyponym to dictionaryelements.Synset (0,*) role testHypernym;
//EdgeClass HasHyponym: HasSemanticRelationship from dictionaryelements.Synset (0,*) role hypernym to dictionaryelements.Synset (0,*) role hyponym;
//EdgeClass HasInstanceHypernym: HasSemanticRelationship from dictionaryelements.NounSynset (0,*) role testInstanceHyponym to dictionaryelements.NounSynset (0,*) role testInstanceHypernym;
//EdgeClass HasInstanceHyponym: HasSemanticRelationship from dictionaryelements.NounSynset (0,*) role instanceHypernym to dictionaryelements.NounSynset (0,*) role instanceHyponym;
//abstract EdgeClass HasLexicalDomain: HasLexicalRelationship from dictionaryelements.Synonym (0,*) role testMember to dictionaryelements.NounSynonym (0,*) role testDomain;
//EdgeClass HasLexicalDomainMember: HasLexicalRelationship from dictionaryelements.NounSynonym (0,*) role domain to dictionaryelements.Synonym (0,*) role member;
//EdgeClass HasLexicalRegionDomain: HasLexicalDomain from dictionaryelements.Synonym (0,*) role testRegionMember to dictionaryelements.NounSynonym (0,*) role testRegionDomain;
//EdgeClass HasLexicalRegionDomainMember: HasLexicalDomainMember from dictionaryelements.NounSynonym (0,*) role regionDomain to dictionaryelements.Synonym (0,*) role regionMember;
//abstract EdgeClass HasLexicalRelationship: HasRelationship from dictionaryelements.Synonym (0,*) role lexicalSource to dictionaryelements.Synonym (0,*) role lexicalTarget;
//EdgeClass HasLexicalTopicDomain: HasLexicalDomain from dictionaryelements.Synonym (0,*) role testTopicMember to dictionaryelements.NounSynonym (0,*) role testTopicDomain;
//EdgeClass HasLexicalTopicDomainMember: HasLexicalDomainMember from dictionaryelements.NounSynonym (0,*) role topicDomain to dictionaryelements.Synonym (0,*) role topicMember;
//EdgeClass HasLexicalUsageDomain: HasLexicalDomain from dictionaryelements.Synonym (0,*) role testUsageMember to dictionaryelements.NounSynonym (0,*) role testUsageDomain;
//EdgeClass HasLexicalUsageDomainMember: HasLexicalDomainMember from dictionaryelements.NounSynonym (0,*) role usageDomain to dictionaryelements.Synonym (0,*) role usageMember;
//EdgeClass HasMemberHolonym: HasHolonym from dictionaryelements.NounSynset (0,*) role testMemberMeronym to dictionaryelements.NounSynset (0,*) role testMemberHolonym;
//EdgeClass HasMemberMeronym: HasMeronym from dictionaryelements.NounSynset (0,*) role memberHolonym to dictionaryelements.NounSynset (0,*) role memberMeronym;
//abstract EdgeClass HasMeronym: HasSemanticRelationship from dictionaryelements.NounSynset (0,*) role holonym to dictionaryelements.NounSynset (0,*) role meronym;
//EdgeClass HasPartHolonym: HasHolonym from dictionaryelements.NounSynset (0,*) role testPartMeronym to dictionaryelements.NounSynset (0,*) role testPartHolonym;
//EdgeClass HasPartMeronym: HasMeronym from dictionaryelements.NounSynset (0,*) role partHolonym to dictionaryelements.NounSynset (0,*) role partMeronym;
//abstract EdgeClass HasRelationship from dictionaryelements.RelateableDictionaryElement (0,*) role source to dictionaryelements.RelateableDictionaryElement (0,*) role target;
//abstract EdgeClass HasSemanticDomain: HasSemanticRelationship from dictionaryelements.Synset (0,*) role testMember to dictionaryelements.NounSynset (0,*) role testDomain;
//EdgeClass HasSemanticDomainMember: HasSemanticRelationship from dictionaryelements.NounSynset (0,*) role domain to dictionaryelements.Synset (0,*) role member;
//EdgeClass HasSemanticRegionDomain: HasSemanticDomain from dictionaryelements.Synset (0,*) role testRegionMember to dictionaryelements.NounSynset (0,*) role testRegionDomain;
//EdgeClass HasSemanticRegionDomainMember: HasSemanticDomainMember from dictionaryelements.NounSynset (0,*) role regionDomain to dictionaryelements.Synset (0,*) role regionMember;
//abstract EdgeClass HasSemanticRelationship: HasRelationship from dictionaryelements.Synset (0,*) role source to dictionaryelements.Synset (0,*) role target;
//EdgeClass HasSemanticTopicDomain: HasSemanticDomain from dictionaryelements.Synset (0,*) role testTopicMember to dictionaryelements.NounSynset (0,*) role testTopicDomain;
//EdgeClass HasSemanticTopicDomainMember: HasSemanticDomainMember from dictionaryelements.NounSynset (0,*) role topicDomain to dictionaryelements.Synset (0,*) role topicMember;
//EdgeClass HasSemanticUsageDomain: HasSemanticDomain from dictionaryelements.Synset (0,*) role testUsageMember to dictionaryelements.NounSynset (0,*) role testUsageDomain;
//EdgeClass HasSemanticUsageDomainMember: HasSemanticDomainMember from dictionaryelements.NounSynset (0,*) role usageDomain to dictionaryelements.Synset (0,*) role usageMember;
//EdgeClass HasSubstanceHolonym: HasHolonym from dictionaryelements.NounSynset (0,*) role testSubstanceMeronym to dictionaryelements.NounSynset (0,*) role testSubstanceHolonym;
//EdgeClass HasSubstanceMeronym: HasMeronym from dictionaryelements.NounSynset (0,*) role substanceHolonym to dictionaryelements.NounSynset (0,*) role substanceMeronym;
//EdgeClass IsAttributeOf: HasSemanticRelationship from dictionaryelements.AdjectiveSynset (0,*) role value to dictionaryelements.NounSynset (0,*) role attribute;
//EdgeClass IsParticipleOf: HasLexicalRelationship from dictionaryelements.AdjectiveSynonym (0,*) role participle to dictionaryelements.VerbSynonym (0,*) role verb;
//EdgeClass IsSimilarTo: HasSemanticRelationship from dictionaryelements.AdjectiveSynset (0,*) role source to dictionaryelements.AdjectiveSynset (0,*) role target;
//EdgeClass PertainsTo: HasLexicalRelationship from dictionaryelements.AdjectiveSynonym (0,*) role pertainym to dictionaryelements.NounSynonym (0,*) role noun;
// Changed the relation TermLinksToWordNetEntry
// Old definition: EdgeClass rsl.rsldomainelements.terms.TermLinksToWordNetEntry from rsl.rsldomainelements.terms.Term (0,*) role term to dictionaryelements.Synonym (0,*) role wordnetterm;
EdgeClass rsl.rsldomainelements.terms.TermLinksToWordNetEntry from rsl.rsldomainelements.terms.Term (0,*) role term to dictionaryelements.RelateableDictionaryElement (0,*) role wordnetterm;