/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package rsldl.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import rsldl.util.RsldlAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class RsldlItemProviderAdapterFactory extends RsldlAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RsldlItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsldl.DLDomain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DLDomainItemProvider dlDomainItemProvider;

	/**
	 * This creates an adapter for a {@link rsldl.DLDomain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDLDomainAdapter() {
		if (dlDomainItemProvider == null) {
			dlDomainItemProvider = new DLDomainItemProvider(this);
		}

		return dlDomainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsldl.DLPrimitive} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DLPrimitiveItemProvider dlPrimitiveItemProvider;

	/**
	 * This creates an adapter for a {@link rsldl.DLPrimitive}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDLPrimitiveAdapter() {
		if (dlPrimitiveItemProvider == null) {
			dlPrimitiveItemProvider = new DLPrimitiveItemProvider(this);
		}

		return dlPrimitiveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsldl.DLRelationshipParticipation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DLRelationshipParticipationItemProvider dlRelationshipParticipationItemProvider;

	/**
	 * This creates an adapter for a {@link rsldl.DLRelationshipParticipation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDLRelationshipParticipationAdapter() {
		if (dlRelationshipParticipationItemProvider == null) {
			dlRelationshipParticipationItemProvider = new DLRelationshipParticipationItemProvider(this);
		}

		return dlRelationshipParticipationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsldl.DLDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DLDiagramItemProvider dlDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link rsldl.DLDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDLDiagramAdapter() {
		if (dlDiagramItemProvider == null) {
			dlDiagramItemProvider = new DLDiagramItemProvider(this);
		}

		return dlDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsldl.DLAlghoritmicTransition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DLAlghoritmicTransitionItemProvider dlAlghoritmicTransitionItemProvider;

	/**
	 * This creates an adapter for a {@link rsldl.DLAlghoritmicTransition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDLAlghoritmicTransitionAdapter() {
		if (dlAlghoritmicTransitionItemProvider == null) {
			dlAlghoritmicTransitionItemProvider = new DLAlghoritmicTransitionItemProvider(this);
		}

		return dlAlghoritmicTransitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsldl.DLPatternBasedTransition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DLPatternBasedTransitionItemProvider dlPatternBasedTransitionItemProvider;

	/**
	 * This creates an adapter for a {@link rsldl.DLPatternBasedTransition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDLPatternBasedTransitionAdapter() {
		if (dlPatternBasedTransitionItemProvider == null) {
			dlPatternBasedTransitionItemProvider = new DLPatternBasedTransitionItemProvider(this);
		}

		return dlPatternBasedTransitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsldl.DLPatternBasedReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DLPatternBasedReferenceItemProvider dlPatternBasedReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link rsldl.DLPatternBasedReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDLPatternBasedReferenceAdapter() {
		if (dlPatternBasedReferenceItemProvider == null) {
			dlPatternBasedReferenceItemProvider = new DLPatternBasedReferenceItemProvider(this);
		}

		return dlPatternBasedReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsldl.DLDataBasedReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DLDataBasedReferenceItemProvider dlDataBasedReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link rsldl.DLDataBasedReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDLDataBasedReferenceAdapter() {
		if (dlDataBasedReferenceItemProvider == null) {
			dlDataBasedReferenceItemProvider = new DLDataBasedReferenceItemProvider(this);
		}

		return dlDataBasedReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsldl.DLEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DLEntityItemProvider dlEntityItemProvider;

	/**
	 * This creates an adapter for a {@link rsldl.DLEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDLEntityAdapter() {
		if (dlEntityItemProvider == null) {
			dlEntityItemProvider = new DLEntityItemProvider(this);
		}

		return dlEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsldl.DLProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DLPropertyItemProvider dlPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link rsldl.DLProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDLPropertyAdapter() {
		if (dlPropertyItemProvider == null) {
			dlPropertyItemProvider = new DLPropertyItemProvider(this);
		}

		return dlPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsldl.DLAttributeLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DLAttributeLinkItemProvider dlAttributeLinkItemProvider;

	/**
	 * This creates an adapter for a {@link rsldl.DLAttributeLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDLAttributeLinkAdapter() {
		if (dlAttributeLinkItemProvider == null) {
			dlAttributeLinkItemProvider = new DLAttributeLinkItemProvider(this);
		}

		return dlAttributeLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsldl.DLInheritanceCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DLInheritanceConditionItemProvider dlInheritanceConditionItemProvider;

	/**
	 * This creates an adapter for a {@link rsldl.DLInheritanceCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDLInheritanceConditionAdapter() {
		if (dlInheritanceConditionItemProvider == null) {
			dlInheritanceConditionItemProvider = new DLInheritanceConditionItemProvider(this);
		}

		return dlInheritanceConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsldl.DLIdentityCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DLIdentityConditionItemProvider dlIdentityConditionItemProvider;

	/**
	 * This creates an adapter for a {@link rsldl.DLIdentityCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDLIdentityConditionAdapter() {
		if (dlIdentityConditionItemProvider == null) {
			dlIdentityConditionItemProvider = new DLIdentityConditionItemProvider(this);
		}

		return dlIdentityConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsldl.DLValidityCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DLValidityConditionItemProvider dlValidityConditionItemProvider;

	/**
	 * This creates an adapter for a {@link rsldl.DLValidityCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDLValidityConditionAdapter() {
		if (dlValidityConditionItemProvider == null) {
			dlValidityConditionItemProvider = new DLValidityConditionItemProvider(this);
		}

		return dlValidityConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsldl.DLTransitionPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DLTransitionPatternItemProvider dlTransitionPatternItemProvider;

	/**
	 * This creates an adapter for a {@link rsldl.DLTransitionPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDLTransitionPatternAdapter() {
		if (dlTransitionPatternItemProvider == null) {
			dlTransitionPatternItemProvider = new DLTransitionPatternItemProvider(this);
		}

		return dlTransitionPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsldl.DLConditionPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DLConditionPatternItemProvider dlConditionPatternItemProvider;

	/**
	 * This creates an adapter for a {@link rsldl.DLConditionPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDLConditionPatternAdapter() {
		if (dlConditionPatternItemProvider == null) {
			dlConditionPatternItemProvider = new DLConditionPatternItemProvider(this);
		}

		return dlConditionPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsldl.DLRepository} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DLRepositoryItemProvider dlRepositoryItemProvider;

	/**
	 * This creates an adapter for a {@link rsldl.DLRepository}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDLRepositoryAdapter() {
		if (dlRepositoryItemProvider == null) {
			dlRepositoryItemProvider = new DLRepositoryItemProvider(this);
		}

		return dlRepositoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsldl.DLDomainElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DLDomainElementItemProvider dlDomainElementItemProvider;

	/**
	 * This creates an adapter for a {@link rsldl.DLDomainElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDLDomainElementAdapter() {
		if (dlDomainElementItemProvider == null) {
			dlDomainElementItemProvider = new DLDomainElementItemProvider(this);
		}

		return dlDomainElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsldl.DLDereferenceLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DLDereferenceLinkItemProvider dlDereferenceLinkItemProvider;

	/**
	 * This creates an adapter for a {@link rsldl.DLDereferenceLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDLDereferenceLinkAdapter() {
		if (dlDereferenceLinkItemProvider == null) {
			dlDereferenceLinkItemProvider = new DLDereferenceLinkItemProvider(this);
		}

		return dlDereferenceLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsldl.DLCustomAlghoritmicTransitionStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DLCustomAlghoritmicTransitionStepItemProvider dlCustomAlghoritmicTransitionStepItemProvider;

	/**
	 * This creates an adapter for a {@link rsldl.DLCustomAlghoritmicTransitionStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDLCustomAlghoritmicTransitionStepAdapter() {
		if (dlCustomAlghoritmicTransitionStepItemProvider == null) {
			dlCustomAlghoritmicTransitionStepItemProvider = new DLCustomAlghoritmicTransitionStepItemProvider(this);
		}

		return dlCustomAlghoritmicTransitionStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsldl.DLPredefinedAlghoritmicTransitionStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DLPredefinedAlghoritmicTransitionStepItemProvider dlPredefinedAlghoritmicTransitionStepItemProvider;

	/**
	 * This creates an adapter for a {@link rsldl.DLPredefinedAlghoritmicTransitionStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDLPredefinedAlghoritmicTransitionStepAdapter() {
		if (dlPredefinedAlghoritmicTransitionStepItemProvider == null) {
			dlPredefinedAlghoritmicTransitionStepItemProvider = new DLPredefinedAlghoritmicTransitionStepItemProvider(this);
		}

		return dlPredefinedAlghoritmicTransitionStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsldl.DLControlFlowStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DLControlFlowStatementItemProvider dlControlFlowStatementItemProvider;

	/**
	 * This creates an adapter for a {@link rsldl.DLControlFlowStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDLControlFlowStatementAdapter() {
		if (dlControlFlowStatementItemProvider == null) {
			dlControlFlowStatementItemProvider = new DLControlFlowStatementItemProvider(this);
		}

		return dlControlFlowStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rsldl.DLPartLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DLPartLinkItemProvider dlPartLinkItemProvider;

	/**
	 * This creates an adapter for a {@link rsldl.DLPartLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDLPartLinkAdapter() {
		if (dlPartLinkItemProvider == null) {
			dlPartLinkItemProvider = new DLPartLinkItemProvider(this);
		}

		return dlPartLinkItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (dlDomainItemProvider != null) dlDomainItemProvider.dispose();
		if (dlPrimitiveItemProvider != null) dlPrimitiveItemProvider.dispose();
		if (dlRelationshipParticipationItemProvider != null) dlRelationshipParticipationItemProvider.dispose();
		if (dlDiagramItemProvider != null) dlDiagramItemProvider.dispose();
		if (dlAlghoritmicTransitionItemProvider != null) dlAlghoritmicTransitionItemProvider.dispose();
		if (dlPatternBasedTransitionItemProvider != null) dlPatternBasedTransitionItemProvider.dispose();
		if (dlPatternBasedReferenceItemProvider != null) dlPatternBasedReferenceItemProvider.dispose();
		if (dlDataBasedReferenceItemProvider != null) dlDataBasedReferenceItemProvider.dispose();
		if (dlEntityItemProvider != null) dlEntityItemProvider.dispose();
		if (dlPropertyItemProvider != null) dlPropertyItemProvider.dispose();
		if (dlAttributeLinkItemProvider != null) dlAttributeLinkItemProvider.dispose();
		if (dlInheritanceConditionItemProvider != null) dlInheritanceConditionItemProvider.dispose();
		if (dlIdentityConditionItemProvider != null) dlIdentityConditionItemProvider.dispose();
		if (dlValidityConditionItemProvider != null) dlValidityConditionItemProvider.dispose();
		if (dlTransitionPatternItemProvider != null) dlTransitionPatternItemProvider.dispose();
		if (dlConditionPatternItemProvider != null) dlConditionPatternItemProvider.dispose();
		if (dlRepositoryItemProvider != null) dlRepositoryItemProvider.dispose();
		if (dlDomainElementItemProvider != null) dlDomainElementItemProvider.dispose();
		if (dlDereferenceLinkItemProvider != null) dlDereferenceLinkItemProvider.dispose();
		if (dlCustomAlghoritmicTransitionStepItemProvider != null) dlCustomAlghoritmicTransitionStepItemProvider.dispose();
		if (dlPredefinedAlghoritmicTransitionStepItemProvider != null) dlPredefinedAlghoritmicTransitionStepItemProvider.dispose();
		if (dlControlFlowStatementItemProvider != null) dlControlFlowStatementItemProvider.dispose();
		if (dlPartLinkItemProvider != null) dlPartLinkItemProvider.dispose();
	}

}
