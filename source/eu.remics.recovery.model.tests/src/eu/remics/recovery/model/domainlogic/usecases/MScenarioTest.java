package eu.remics.recovery.model.domainlogic.usecases;

import static org.junit.Assert.assertEquals;
import org.junit.Test;

import eu.redseeds.scl.model.rsl.rsldomainelements.phrases.SimpleVerbPhraseDTO;
import eu.redseeds.scl.model.rsl.rslrequirementrepresentations.descriptiverequirementrepresentations.ConstrainedLanguageScenarioDTO;
import eu.redseeds.scl.model.rsl.rslrequirementrepresentationsentences.svosentences.SVOSentenceDTO;
import eu.redseeds.scl.model.rsl.rslrequirements.requirementsspecifications.UseCaseDTO;
import eu.remics.recovery.model.dto.TerminologyOperationFailureException;
import eu.remics.recovery.model.tests.AbstractRecoveryModelTest;

public class MScenarioTest extends AbstractRecoveryModelTest {
	
	@Test
	public void testSplit(){
		SVOSentenceDTO sent1 = facade.createSVOSentenceDTO();
		SimpleVerbPhraseDTO svp = facade.createSimpleVerbPhraseDTO();
		svp.setVerb(facade.createVerbDTO("selects"));
		svp.getVerb().autoAssignSense();
		svp.setObject(facade.createNounPhraseDTO());
		svp.getObject().setNounText("Notion1");
		svp.getObject().connect();
		svp.getObject().getNoun().autoAssignSense();
		sent1.setPredicate(svp);
		sent1.setSubject(facade.createNounPhraseDTO());
		sent1.getSubject().setNounText("User");
		sent1.getSubject().connect();
		sent1.getSubject().getNoun().autoAssignSense();
		SVOSentenceDTO sent2 = facade.createSVOSentenceDTO();
		svp = facade.createSimpleVerbPhraseDTO();
		svp.setVerb(facade.createVerbDTO("enters"));
		svp.getVerb().autoAssignSense();
		svp.setObject(facade.createNounPhraseDTO());
		svp.getObject().setNounText("Notion2");
		svp.getObject().connect();
		svp.getObject().getNoun().autoAssignSense();
		sent2.setPredicate(svp);
		sent2.setSubject(facade.createNounPhraseDTO());
		sent2.getSubject().setNounText("User");
		sent2.getSubject().connect();
		sent2.getSubject().getNoun().autoAssignSense();
		UseCaseDTO uc1 = facade.createUseCaseDTO();
		ConstrainedLanguageScenarioDTO scen1 = facade.createConstrainedLanguageScenarioDTO();
		scen1.setName("scenariusz 1");
		scen1.addScenarioStep(sent1.copy());
		scen1.addScenarioStep(sent1.copy());
		scen1.addScenarioStep(sent1.copy());
		scen1.addScenarioStep(sent2.copy());
		uc1.addConstrainedLanguageScenario(scen1);
		UseCaseDTO uc2 = MScenario.split("splited", uc1, 2);
		assertEquals(2,uc1.getConstrainedLanguageScenarioDTOList().get(0).getScenarioSentenceList().size());
		assertEquals(2,uc2.getConstrainedLanguageScenarioDTOList().get(0).getScenarioSentenceList().size());
		uc1=MScenario.unsplit("merged", uc1, uc2);
		assertEquals(4,uc1.getConstrainedLanguageScenarioDTOList().get(0).getScenarioSentenceList().size());
	}
	
	@Test
	public void testCompareSentences() throws TerminologyOperationFailureException{
		SVOSentenceDTO sent1 = facade.createSVOSentenceDTO();
		SimpleVerbPhraseDTO svp = facade.createSimpleVerbPhraseDTO();
		svp.setVerb(facade.createVerbDTO("selects"));
		svp.getVerb().autoAssignSense();
		svp.setObject(facade.createNounPhraseDTO());
		svp.getObject().setNounText("Notion1");
		svp.getObject().connect();
		svp.getObject().getNoun().autoAssignSense();
		sent1.setPredicate(svp);
		sent1.setSubject(facade.createNounPhraseDTO());
		sent1.getSubject().setNounText("User");
		sent1.getSubject().connect();
		sent1.getSubject().getNoun().autoAssignSense();
		SVOSentenceDTO sent2 = facade.createSVOSentenceDTO();
		svp = facade.createSimpleVerbPhraseDTO();
		svp.setVerb(facade.createVerbDTO("enters"));
		svp.getVerb().autoAssignSense();
		svp.setObject(facade.createNounPhraseDTO());
		svp.getObject().setNounText("Notion2");
		svp.getObject().connect();
		svp.getObject().getNoun().autoAssignSense();
		sent2.setPredicate(svp);
		sent2.setSubject(facade.createNounPhraseDTO());
		sent2.getSubject().setNounText("User");
		sent2.getSubject().connect();
		sent2.getSubject().getNoun().autoAssignSense();
		UseCaseDTO uc1 = facade.createUseCaseDTO();
		ConstrainedLanguageScenarioDTO scen1 = facade.createConstrainedLanguageScenarioDTO();
		scen1.setName("scenariusz 1");
		scen1.addScenarioStep(sent1.copy());
		scen1.addScenarioStep(sent1.copy());
		scen1.addScenarioStep(sent1.copy());
		scen1.addScenarioStep(sent2.copy());
		uc1.addConstrainedLanguageScenario(scen1);
		UseCaseDTO uc2 = facade.createUseCaseDTO();
		ConstrainedLanguageScenarioDTO scen2 = facade.createConstrainedLanguageScenarioDTO();
		scen2.setName("scenariusz 2");
		scen2.addScenarioStep(sent2.copy());
		scen2.addScenarioStep(sent1.copy());
		scen2.addScenarioStep(sent2.copy());
		uc2.addConstrainedLanguageScenario(scen2);
		int[] l = MScenario.compareScenarios(scen1, scen2);
		assertEquals(2,l[0]);
		assertEquals(1,l[1]);
		assertEquals(2,l[2]);
		l = MScenario.compareScenarios(scen2, scen1);
		assertEquals(2,l[0]);
		assertEquals(-1,l[1]);
		assertEquals(2,l[2]);
	}
	
	@Test
	public void testCompareSentences2() throws TerminologyOperationFailureException{
		SVOSentenceDTO sent1 = facade.createSVOSentenceDTO();
		SimpleVerbPhraseDTO svp = facade.createSimpleVerbPhraseDTO();
		svp.setVerb(facade.createVerbDTO("selects"));
		svp.getVerb().autoAssignSense();
		svp.setObject(facade.createNounPhraseDTO());
		svp.getObject().setNounText("Notion1");
		svp.getObject().connect();
		svp.getObject().getNoun().autoAssignSense();
		sent1.setPredicate(svp);
		sent1.setSubject(facade.createNounPhraseDTO());
		sent1.getSubject().setNounText("User");
		sent1.getSubject().connect();
		sent1.getSubject().getNoun().autoAssignSense();
		SVOSentenceDTO sent2 = facade.createSVOSentenceDTO();
		svp = facade.createSimpleVerbPhraseDTO();
		svp.setVerb(facade.createVerbDTO("enters"));
		svp.getVerb().autoAssignSense();
		svp.setObject(facade.createNounPhraseDTO());
		svp.getObject().setNounText("Notion2");
		svp.getObject().connect();
		svp.getObject().getNoun().autoAssignSense();
		sent2.setPredicate(svp);
		sent2.setSubject(facade.createNounPhraseDTO());
		sent2.getSubject().setNounText("User");
		sent2.getSubject().connect();
		sent2.getSubject().getNoun().autoAssignSense();
		UseCaseDTO uc1 = facade.createUseCaseDTO();
		ConstrainedLanguageScenarioDTO scen1 = facade.createConstrainedLanguageScenarioDTO();
		scen1.setName("scenariusz 1");
		scen1.addScenarioStep(facade.createPreconditionSentenceDTO());
		scen1.addScenarioStep(sent1.copy());
		scen1.addScenarioStep(sent1.copy());
		scen1.addScenarioStep(sent1.copy());
		scen1.addScenarioStep(sent2.copy());
		uc1.addConstrainedLanguageScenario(scen1);
		UseCaseDTO uc2 = facade.createUseCaseDTO();
		ConstrainedLanguageScenarioDTO scen2 = facade.createConstrainedLanguageScenarioDTO();
		scen2.setName("scenariusz 2");
		scen2.addScenarioStep(facade.createPreconditionSentenceDTO());
		scen2.addScenarioStep(facade.createInvocationSentenceDTO());
		scen2.addScenarioStep(sent2.copy());
		scen2.addScenarioStep(sent1.copy());
		scen2.addScenarioStep(sent2.copy());
		uc2.addConstrainedLanguageScenario(scen2);
		int[] l = MScenario.compareScenarios(scen1, scen2);
		assertEquals(2,l[0]);
		assertEquals(0,l[1]);
		assertEquals(3,l[2]);
		l = MScenario.compareScenarios(scen2, scen1);
		assertEquals(2,l[0]);
		assertEquals(0,l[1]);
		assertEquals(3,l[2]);
	}
	
	@Test
	public void testCompareSentences3() throws TerminologyOperationFailureException{
		SVOSentenceDTO sent1 = facade.createSVOSentenceDTO();
		SimpleVerbPhraseDTO svp = facade.createSimpleVerbPhraseDTO();
		svp.setVerb(facade.createVerbDTO("selects"));
		svp.getVerb().autoAssignSense();
		svp.setObject(facade.createNounPhraseDTO());
		svp.getObject().setNounText("Notion1");
		svp.getObject().connect();
		svp.getObject().getNoun().autoAssignSense();
		sent1.setPredicate(svp);
		sent1.setSubject(facade.createNounPhraseDTO());
		sent1.getSubject().setNounText("User");
		sent1.getSubject().connect();
		sent1.getSubject().getNoun().autoAssignSense();
		SVOSentenceDTO sent2 = facade.createSVOSentenceDTO();
		svp = facade.createSimpleVerbPhraseDTO();
		svp.setVerb(facade.createVerbDTO("enters"));
		svp.getVerb().autoAssignSense();
		svp.setObject(facade.createNounPhraseDTO());
		svp.getObject().setNounText("Notion2");
		svp.getObject().connect();
		svp.getObject().getNoun().autoAssignSense();
		sent2.setPredicate(svp);
		sent2.setSubject(facade.createNounPhraseDTO());
		sent2.getSubject().setNounText("User");
		sent2.getSubject().connect();
		sent2.getSubject().getNoun().autoAssignSense();
		UseCaseDTO uc1 = facade.createUseCaseDTO();
		ConstrainedLanguageScenarioDTO scen1 = facade.createConstrainedLanguageScenarioDTO();
		scen1.setName("scenariusz 1");
		scen1.addScenarioStep(facade.createPreconditionSentenceDTO());
		scen1.addScenarioStep(sent1.copy());
		scen1.addScenarioStep(sent1.copy());
		scen1.addScenarioStep(sent1.copy());
		scen1.addScenarioStep(sent2.copy());
		uc1.addConstrainedLanguageScenario(scen1);
		UseCaseDTO uc2 = facade.createUseCaseDTO();
		ConstrainedLanguageScenarioDTO scen2 = facade.createConstrainedLanguageScenarioDTO();
		scen2.setName("scenariusz 2");
		scen2.addScenarioStep(facade.createPreconditionSentenceDTO());
		scen2.addScenarioStep(sent2.copy());
		scen2.addScenarioStep(sent1.copy());
		scen2.addScenarioStep(sent2.copy());
		uc2.addConstrainedLanguageScenario(scen2);
		int[] l = MScenario.compareScenarios(scen1, scen2);
		assertEquals(2,l[0]);
		assertEquals(1,l[1]);
		assertEquals(3,l[2]);
		l = MScenario.compareScenarios(scen2, scen1);
		assertEquals(2,l[0]);
		assertEquals(-1,l[1]);
		assertEquals(3,l[2]);
	}
	
	@Test
	public void testCompareSentences4() throws TerminologyOperationFailureException{
		SVOSentenceDTO sent1 = facade.createSVOSentenceDTO();
		SimpleVerbPhraseDTO svp = facade.createSimpleVerbPhraseDTO();
		svp.setVerb(facade.createVerbDTO("selects"));
		svp.getVerb().autoAssignSense();
		svp.setObject(facade.createNounPhraseDTO());
		svp.getObject().setNounText("Notion1");
		svp.getObject().connect();
		svp.getObject().getNoun().autoAssignSense();
		sent1.setPredicate(svp);
		sent1.setSubject(facade.createNounPhraseDTO());
		sent1.getSubject().setNounText("User");
		sent1.getSubject().connect();
		sent1.getSubject().getNoun().autoAssignSense();
		SVOSentenceDTO sent2 = facade.createSVOSentenceDTO();
		svp = facade.createSimpleVerbPhraseDTO();
		svp.setVerb(facade.createVerbDTO("enters"));
		svp.getVerb().autoAssignSense();
		svp.setObject(facade.createNounPhraseDTO());
		svp.getObject().setNounText("Notion2");
		svp.getObject().connect();
		svp.getObject().getNoun().autoAssignSense();
		sent2.setPredicate(svp);
		sent2.setSubject(facade.createNounPhraseDTO());
		sent2.getSubject().setNounText("User");
		sent2.getSubject().connect();
		sent2.getSubject().getNoun().autoAssignSense();
		UseCaseDTO uc1 = facade.createUseCaseDTO();
		ConstrainedLanguageScenarioDTO scen1 = facade.createConstrainedLanguageScenarioDTO();
		scen1.setName("scenariusz 1");
		scen1.addScenarioStep(facade.createPreconditionSentenceDTO());
		scen1.addScenarioStep(facade.createInvocationSentenceDTO());
		scen1.addScenarioStep(sent1.copy());
		scen1.addScenarioStep(sent1.copy());
		scen1.addScenarioStep(sent1.copy());
		scen1.addScenarioStep(sent2.copy());
		uc1.addConstrainedLanguageScenario(scen1);
		UseCaseDTO uc2 = facade.createUseCaseDTO();
		ConstrainedLanguageScenarioDTO scen2 = facade.createConstrainedLanguageScenarioDTO();
		scen2.setName("scenariusz 2");
		scen2.addScenarioStep(facade.createPreconditionSentenceDTO());
		scen2.addScenarioStep(sent2.copy());
		scen2.addScenarioStep(sent1.copy());
		scen2.addScenarioStep(sent2.copy());
		uc2.addConstrainedLanguageScenario(scen2);
		int[] l = MScenario.compareScenarios(scen1, scen2);
		assertEquals(2,l[0]);
		assertEquals(2,l[1]);
		assertEquals(4,l[2]);
		l = MScenario.compareScenarios(scen2, scen1);
		assertEquals(2,l[0]);
		assertEquals(-2,l[1]);
		assertEquals(4,l[2]);
	}
	
	@Test
	public void testCompareSentences5() throws TerminologyOperationFailureException{
		SVOSentenceDTO sent1 = facade.createSVOSentenceDTO();
		SimpleVerbPhraseDTO svp = facade.createSimpleVerbPhraseDTO();
		svp.setVerb(facade.createVerbDTO("selects"));
		svp.getVerb().autoAssignSense();
		svp.setObject(facade.createNounPhraseDTO());
		svp.getObject().setNounText("Notion1");
		svp.getObject().connect();
		svp.getObject().getNoun().autoAssignSense();
		sent1.setPredicate(svp);
		sent1.setSubject(facade.createNounPhraseDTO());
		sent1.getSubject().setNounText("User");
		sent1.getSubject().connect();
		sent1.getSubject().getNoun().autoAssignSense();
		SVOSentenceDTO sent2 = facade.createSVOSentenceDTO();
		svp = facade.createSimpleVerbPhraseDTO();
		svp.setVerb(facade.createVerbDTO("enters"));
		svp.getVerb().autoAssignSense();
		svp.setObject(facade.createNounPhraseDTO());
		svp.getObject().setNounText("Notion2");
		svp.getObject().connect();
		svp.getObject().getNoun().autoAssignSense();
		sent2.setPredicate(svp);
		sent2.setSubject(facade.createNounPhraseDTO());
		sent2.getSubject().setNounText("User");
		sent2.getSubject().connect();
		sent2.getSubject().getNoun().autoAssignSense();
		UseCaseDTO uc1 = facade.createUseCaseDTO();
		ConstrainedLanguageScenarioDTO scen1 = facade.createConstrainedLanguageScenarioDTO();
		scen1.setName("scenariusz 1");
		scen1.addScenarioStep(facade.createPreconditionSentenceDTO());
		scen1.addScenarioStep(sent1.copy());
		scen1.addScenarioStep(sent1.copy());
		scen1.addScenarioStep(sent1.copy());
		scen1.addScenarioStep(sent2.copy());
		uc1.addConstrainedLanguageScenario(scen1);
		UseCaseDTO uc2 = facade.createUseCaseDTO();
		ConstrainedLanguageScenarioDTO scen2 = facade.createConstrainedLanguageScenarioDTO();
		scen2.setName("scenariusz 2");
		scen2.addScenarioStep(facade.createPreconditionSentenceDTO());
		scen2.addScenarioStep(facade.createInvocationSentenceDTO());
		scen2.addScenarioStep(facade.createInvocationSentenceDTO());
		scen2.addScenarioStep(sent2.copy());
		scen2.addScenarioStep(sent1.copy());
		scen2.addScenarioStep(sent2.copy());
		uc2.addConstrainedLanguageScenario(scen2);
		int[] l = MScenario.compareScenarios(scen1, scen2);
		assertEquals(2,l[0]);
		assertEquals(-1,l[1]);
		assertEquals(4,l[2]);
		l = MScenario.compareScenarios(scen2, scen1);
		assertEquals(2,l[0]);
		assertEquals(1,l[1]);
		assertEquals(4,l[2]);
	}
	
	@Test
	public void testCompareSentences6() throws TerminologyOperationFailureException{
		SVOSentenceDTO sent1 = facade.createSVOSentenceDTO();
		SimpleVerbPhraseDTO svp = facade.createSimpleVerbPhraseDTO();
		svp.setVerb(facade.createVerbDTO("selects"));
		svp.getVerb().autoAssignSense();
		svp.setObject(facade.createNounPhraseDTO());
		svp.getObject().setNounText("Notion1");
		svp.getObject().connect();
		svp.getObject().getNoun().autoAssignSense();
		sent1.setPredicate(svp);
		sent1.setSubject(facade.createNounPhraseDTO());
		sent1.getSubject().setNounText("User");
		sent1.getSubject().connect();
		sent1.getSubject().getNoun().autoAssignSense();
		SVOSentenceDTO sent2 = facade.createSVOSentenceDTO();
		svp = facade.createSimpleVerbPhraseDTO();
		svp.setVerb(facade.createVerbDTO("enters"));
		svp.getVerb().autoAssignSense();
		svp.setObject(facade.createNounPhraseDTO());
		svp.getObject().setNounText("Notion2");
		svp.getObject().connect();
		svp.getObject().getNoun().autoAssignSense();
		sent2.setPredicate(svp);
		sent2.setSubject(facade.createNounPhraseDTO());
		sent2.getSubject().setNounText("User");
		sent2.getSubject().connect();
		sent2.getSubject().getNoun().autoAssignSense();
		UseCaseDTO uc1 = facade.createUseCaseDTO();
		ConstrainedLanguageScenarioDTO scen1 = facade.createConstrainedLanguageScenarioDTO();
		scen1.setName("scenariusz 1");
		scen1.addScenarioStep(facade.createPreconditionSentenceDTO());
		scen1.addScenarioStep(sent1.copy());
		scen1.addScenarioStep(sent1.copy());
		scen1.addScenarioStep(sent1.copy());
		scen1.addScenarioStep(sent2.copy());
		uc1.addConstrainedLanguageScenario(scen1);
		UseCaseDTO uc2 = facade.createUseCaseDTO();
		ConstrainedLanguageScenarioDTO scen2 = facade.createConstrainedLanguageScenarioDTO();
		scen2.setName("scenariusz 2");
		scen2.addScenarioStep(facade.createPreconditionSentenceDTO());
		scen2.addScenarioStep(facade.createInvocationSentenceDTO());
		scen2.addScenarioStep(sent2.copy());
		scen2.addScenarioStep(facade.createInvocationSentenceDTO());
		scen2.addScenarioStep(sent1.copy());
		scen2.addScenarioStep(sent2.copy());
		uc2.addConstrainedLanguageScenario(scen2);
		int[] l = MScenario.compareScenarios(scen1, scen2);
		assertEquals(2,l[0]);
		assertEquals(-1,l[1]);
		assertEquals(4,l[2]);
		l = MScenario.compareScenarios(scen2, scen1);
		assertEquals(2,l[0]);
		assertEquals(1,l[1]);
		assertEquals(4,l[2]);
	}
	
}
